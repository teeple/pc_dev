<?php
module_load_include('inc', 'product_catalog_ajax', 'custom_submit');
module_load_include('inc', 'product_catalog_ajax', 'create_modal_link');
// ---------------------------------------------------------------------------
// Drupal hooks.
// jangsun
 
/**
 *  Implementation of hook_menu()
 */
function product_catalog_ajax_menu() {

  $items['product_catalog_ajax/%ctools_js/add'] = array(
      'title' => 'Add New',
      'page callback' => 'product_catalog_ajax_add_content',
      'page arguments' => array(1),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,  
  );     
  $items['product_catalog_ajax/%ctools_js/add_modal/%'] = array( 
      'title' => 'Add New',
      'page callback' => 'product_catalog_ajax_add_modal_content',
      'page arguments' => array(1,3),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
  );
  $items['product_catalog_ajax/%ctools_js/upload_modal/%'] = array( 
      'title' => 'Add New',
      'page callback' => 'product_catalog_ajax_upload_modal_content',
      'page arguments' => array(1,3),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
  );
  $items['product_catalog_ajax/check_rollover_type/%'] = array( 
      'title' => 'Add New',
      'page callback' => 'product_catalog_ajax_check_belong_to_rollover',
      'page arguments' => array(2),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
  );
  $items['product_catalog_ajax/%ctools_js/select_modal/%'] = array( 
      'title' => 'Add New',
      'page callback' => 'product_catalog_ajax_select_modal_content',
      'page arguments' => array(1,3),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
  );
  $items['product_catalog_ajax/select_modal_item/%'] = array( 
      'title' => 'Select Modal Item',
      'page callback' => 'product_catalog_ajax_select_modal_item_submit',
      'page arguments' => array(2),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
  );
  $items['product_catalog_ajax/delete_from_view/%'] = array(
      'title' => 'Delete',
      'page callback' => 'product_catalog_ajax_delete_from_view',
      'page arguments' => array(2),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
  );
  $items['product_catalog_ajax/%ctools_js/edit/%'] = array(
      'title' => 'Edit',
      'page callback' => 'product_catalog_ajax_edit_content',
      'page arguments' => array(1,3),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
  ); 
  $items['product_catalog_ajax/%ctools_js/edit_modal/%'] = array(
      'title' => 'Edit',
      'page callback' => 'product_catalog_modal_form_edit_modal_content',
      'page arguments' => array(1,3),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
  );  
  $items['product_catalog_ajax/view_modal/%'] = array(
  		'title' => 'View',
  		'page callback' => 'product_catalog_modal_form_view',
  		'page arguments' => array(2),
  		'access callback' => TRUE,
  		'type' => MENU_CALLBACK,
  );
  $items['product_catalog_ajax/modal_view_link/%'] = array(
  		'title' => 'View',
  		'page callback' => 'product_catalog_modal_view_link',
  		'page arguments' => array(2),
  		'access callback' => TRUE,
  		'type' => MENU_CALLBACK,
  );
  $items['product_catalog_ajax/%ctools_js/delete_from_tree'] = array(
      'title' => 'Delete',
      'page callback' => 'product_catalog_ajax_delete_from_tree',
      'page arguments' => array(1),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
  );
  $items['product_catalog_ajax/%ctools_js/loadTree/%'] = array(
      'title' => 'Load Tree',
      'page callback' => 'product_catalog_ajax_load_tree',
      'page arguments' => array(1,3),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
  );
  $items['product_catalog_ajax/%ctools_js/move_node'] = array(
      'title' => 'Edit',
      'page callback' => 'product_catalog_ajax_move_node',
      'page arguments' => array(1),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
  );
  $items['product_catalog_ajax/load_select_form/%'] = array(
      'title' => 'Select Form',
      'page callback' => 'product_catalog_ajax_load_select_form',
      'page arguments' => array(2),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
  );
  $items['product_catalog_ajax/select_item'] = array(
  	  'title' => 'Select Form Submit',
      'page callback' => 'product_catalog_ajax_select_submit',
      //'page arguments' => array(2),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
  );
  $items['product_catalog_ajax/custom_submit'] = array(
  		'title' => 'Custom Submit',
  		'page callback' => 'product_catalog_ajax_custom_submit',
  		//'page arguments' => array(2),
  		'access callback' => TRUE,
  		'type' => MENU_CALLBACK,
  );
  $items['product_catalog_ajax/counter_list'] = array(
  		'title' => 'Set Counter List',
  		'page callback' => 'product_catalog_ajax_counter_list',
  		'access callback' => TRUE,
  		'type' => MENU_CALLBACK,
  );
  $items['product_catalog_ajax/set_rollover'] = array(
  		'title' => 'Set Rollover',
  		'page callback' => 'product_catalog_ajax_set_rollover',
  		'access callback' => TRUE,
  		'type' => MENU_CALLBACK,
  );
  $items['product_catalog_ajax/set_cardtype'] = array(
  		'title' => 'Set Rollover',
  		'page callback' => 'product_catalog_ajax_set_cardtype',
  		'access callback' => TRUE,
  		'type' => MENU_CALLBACK,
  );
  $items['product_catalog_ajax/copy_node/%'] = array(
      'title' => 'Copy',
      'page callback' => 'product_catalog_ajax_copy_node',
      'page arguments' => array(2),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
  );
  $items['product_catalog_ajax/paste_node/%'] = array(
      'title' => 'Paste',
      'page callback' => 'product_catalog_ajax_paste_node',
      'page arguments' => array(2),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
  );
  $items['product_catalog_ajax/clone_product/%'] = array(
      'title' => 'Paste',
      'page callback' => 'product_catalog_ajax_clone_product',
      'page arguments' => array(2),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
  );
  $items['product_catalog_ajax/remove_field_collection_item/%'] = array(
      'title' => 'Remove',
      'page callback' => 'product_catalog_ajax_remove_field_collection_item',
      'page arguments' => array(2),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
  );
  $items['product_catalog_ajax/%ctools_js/modal_restore_confirm/%'] = array(
      'title' => 'Restore',
      'page callback' => 'product_catalog_modal_restore_confirm',
      'page arguments' => array(1,3),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
  );
  return $items;

} 

function product_catalog_ajax_remove_field_collection_item($fieldCollectionDomID){
    ctools_include('node.pages', 'node', '');
    ctools_include('ajax');
    global $user;
    
    $collectionID = explode('_',$fieldCollectionDomID);
    
    if(!empty($collectionID[3])){//exisiting collection item
        $collectionID = $collectionID[3];
        $fieldCollectionItem = field_collection_item_load($collectionID);
        $fieldCollectionItem->delete();
    }else{//non existing collection item
        
    }
    $output = '';
    print json_encode($output);
    exit;
};

function product_catalog_ajax_check_rollover_type($counterId) {
	ctools_include('node.pages', 'node', '');
	ctools_include('ajax');
	global $user;
	
	$output = FALSE;
	$counter = node_load($counterId);
	
	if(!empty($counter)) {
		$counterGroupTypeTerm = taxonomy_term_load($counter->field_counter_type['und'][0]['tid']);
		
		if($counterGroupTypeTerm->name == 'Rollover') {
			$output = 'TRUE';
		}
	}
	print json_encode($output);
	exit;
}

function product_catalog_ajax_clone_product($targetProductId){
    ctools_include('node.pages', 'node', '');
    global $user;
		$maxFieldLength = 60;
		
		$_SESSION['http_request_count'] = 0; // reset counter for debug information.
		$operations = array();
   
		$targetProductNode = node_load($targetProductId);
    
    $clonedTime = time();
    $productNode = clone $targetProductNode;
    $productNode->uid = $user->uid;
    $productNode->title = substr($productNode->title.'_'.$clonedTime,0,$maxFieldLength);
    $productNode->field_product_id['und'][0]['value'] = substr($productNode->field_product_id['und'][0]['value'].'_'.$clonedTime,0,$maxFieldLength);
    $productNode->field_product_id['und'][0]['safe_value'] = substr($productNode->field_product_id['und'][0]['safe_value'].'_'.$clonedTime,0,$maxFieldLength);
    $productNode->field_is_cloned['und'][0]['value'] = TRUE;
		$short_code = substr($clonedTime,-10);
		$productNode->field_short_code['und'][0]['value'] = $short_code;
		$productNode->field_short_code['und'][0]['safe_value'] = $short_code;
		_unset_unused_field_of_cloned_node($productNode);
    unset($productNode->field_weight_for_ratingpriority);
    unset($productNode->field_weight_for_hierarchy);
		node_save($productNode);   
    if(isset($targetProductNode->field_parameterized)){
        _clone_field_collection('node',$targetProductNode,$productNode,'field_parameterized');
    }
		
		//$_SESSION['redirect_after_batch'] = '';
		$_SESSION['rid_history'] = array();
		$view = views_get_view('list_product_child_node');
    $view->set_display('panel_pane_3');
    $view->set_arguments(array('0' => $targetProductNode->nid));
    $view->execute(); 
    
    foreach($view->result as $record){
        $targetChildNode = node_load($record->nid);
        $operations[] = array('batch_clone_product_child', array($targetChildNode,$productNode));
		 }
    
		$redirectURL =  _get_redirect_url_in_view_n_delete('view', $productNode);
		$_SESSION['redirect_after_batch'] = $redirectURL['path'];
		
    $batch = array(
			'operations' => $operations,
			'finished' => 'batch_clone_product_finished',
			'title' => t('Cloning Product @product_name', array( '@product_name' => $targetProductNode->title)),
			'init_message' => t('Starting ... '),
			'progress_message' => t('Processed @current out of @total.'),
			'error_message' => t('Cloning procedure has encountered an error.'),
		);
		batch_set($batch);
}

function batch_clone_product_finished($success, $results, $operations) 
{
	if ($success) {
		// Here we could do something meaningful with the results.
		// We just display the number of nodes we processed...
		drupal_set_message(t('Cloning procedure has been completed successfully'));
	}
	else {
		// An error occurred.
		// $operations contains the operations that remained unprocessed.
		$error_operation = reset($operations);
		drupal_set_message(t('An error occurred while processing @operation with arguments : @args', 
			array('@operation' => $error_operation[0], '@args' => print_r($error_operation[0], TRUE))));
	}
	
	unset($_SESSION['rid_history']);
	
	if (isset($_SESSION['redirect_after_batch'])) {
		drupal_goto($_SESSION['redirect_after_batch']);
	}
}

function batch_clone_product_child($targetNode,$productNode, &$context) 
{
	ctools_include('node.pages', 'node', '');
	global $user;
	
	$maxFieldLength = 60;
	
	switch($targetNode->type){
		case 'tariffplan':
      _paste_tariffplan($targetNode,$productNode->nid,$targetNode->field_ref_tree_tid['und'][0]['value'],$targetNode->field_weight['und'][0]['value']);
      break;
  default:
      $childNode = clone $targetNode;
      $childNode->uid = $user->uid;
      $childNode->field_ref_product['und'][0]['nid'] = $productNode->nid;
			if($childNode->type == 'actionpricechargerecurring' || $childNode->type == 'actionpricechargerecurringdefaul'){
				$now = time();
				if(in_array($now,$SESSION['rid_history'])){
					$now++;
				}
				$SESSION['rid_history'][] = $now;
				
				$recurring_charge_id = $productNode -> field_product_id['und'][0]['value'] . '_' . $now;
				$childNode->field_recurring_charge_id['und'][0]['value'] = $recurring_charge_id;
				$childNode->field_recurring_charge_id['und'][0]['safe_value'] = $recurring_charge_id;
				//$cloneNode->title = 'temp';
			}
      _unset_unused_field_of_cloned_node($childNode);
      node_save($childNode);
      if(isset($targetNode->field_charge_collection)){
          _clone_field_collection('node',$targetNode,$childNode,'field_charge_collection');
      }
      if(isset($targetNode->field_discount_collection)){
          _clone_field_collection('node',$targetNode,$childNode,'field_discount_collection');
      }
			if(isset($targetNode->field_attribute_key_value)){
          _clone_field_collection('node',$targetNode,$childNode,'field_attribute_key_value');
      }
			if(isset($targetNode->field_prefix_range)){
          _clone_field_collection('node',$targetNode,$childNode,'field_prefix_range');
      }
			if(isset($targetNode->field_required_device)){
          _clone_field_collection('node',$targetNode,$childNode,'field_required_device');
      }
			_clone_nested_child_node($targetNode,$childNode);
      
      $actionSetView = views_get_view('query_actionset_children');
      $actionSetView->set_display('panel_pane_1');
      $actionSetView->set_arguments(array('0' => $targetNode->nid));
      $actionSetView->execute(); 
      foreach($actionSetView->result as $actionSetRecord){
          $targetActionSetNode = node_load($actionSetRecord->nid);
          $actionSetNode = clone $targetActionSetNode;
          $actionSetNode->uid = $user->uid;
          $actionSetNode->field_ref_source_action['und'][0]['nid'] = $childNode->nid;
          _unset_unused_field_of_cloned_node($actionSetNode);
          node_save($actionSetNode);
      }
			
			$actionThresholdSetView = views_get_view('list_actions');
      $actionThresholdSetView->set_display('panel_pane_2');
      $actionThresholdSetView->set_arguments(array('0' => $targetNode->nid));
      $actionThresholdSetView->execute(); 
      foreach($actionThresholdSetView->result as $actionSetRecord){
          $targetActionSetNode = node_load($actionSetRecord->nid);
          $actionSetNode = clone $targetActionSetNode;
          $actionSetNode->uid = $user->uid;
          $actionSetNode->field_ref_treenodecounter['und'][0]['nid'] = $childNode->nid;
          _unset_unused_field_of_cloned_node($actionSetNode);
          node_save($actionSetNode);
      }
      break;
	}
	_batch_update_http_requests();
}

function _paste_tariffplan($targetNode,$productNid,$baseTid,$weight){
    global $user;
    $targetRefTreeTid = $targetNode->field_ref_tree_tid['und'][0]['value'];
    if($targetRefTreeTid != $baseTid){//error diffrent voca
        $output['success'] = FALSE;
        $targetRefTreeTerm = taxonomy_term_load($targetRefTreeTid);
        $baseIdTerm = taxonomy_term_load($baseTid);
        if($targetRefTreeTerm->name != $baseIdTerm->name){
            $output['reason'] = $targetRefTreeTerm->name . ' tariffplan can not be pasted to '. $baseIdTerm->name . ' tariffplan';
        }else{
            $targetRefTermVocaName = $targetRefTreeTerm->vocabulary_machine_name;
            $baseTermVocaName = $baseIdTerm->vocabulary_machine_name;
            $targetRefTermVocaName = explode('_',$targetRefTermVocaName);
            $baseTermVocaName = explode('_',$baseTermVocaName);
            
            if($targetRefTermVocaName[3] != $baseTermVocaName[3]){//service domain
                $output['reason'] = 'tariffplan of '. $targetRefTermVocaName[3]. ' service domain can not be pasted to '. $baseTermVocaName[3] .' service domain';
            }else if($targetRefTermVocaName[5] != $baseTermVocaName[5]){// billing type
                $output['reason'] = 'tariffplan of '. $targetRefTermVocaName[5]. ' billtype can not be pasted to '. $baseTermVocaName[5] .' billtype';
            }else{
                $output['reason'] = 'Different Service Domain';
            }
        }                
    }else{
        //check bill type
        $oldProductNode = node_load($targetNode->field_ref_product['und'][0]['nid']);
        $newProductNode = node_load($productNid);
        if($oldProductNode->field_billing_type['und'][0]['tid'] != $newProductNode->field_billing_type['und'][0]['tid']){//check bill type
            $output['success'] = FALSE;
            $oldBillType = taxonomy_term_load($oldProductNode->field_billing_type['und'][0]['tid']);
            $newBillType = taxonomy_term_load($newProductNode->field_billing_type['und'][0]['tid']);
            $output['reason'] = 'tariffplan of '. $oldBillType->name. ' billtype can not be pasted to '. $newBillType->name .' billtype';
        }else if($oldProductNode->field_product_type['und'][0]['tid'] != $newProductNode->field_product_type['und'][0]['tid']){//check product type
            $output['success'] = FALSE;
            $oldProductType = taxonomy_term_load($oldProductNode->field_product_type['und'][0]['tid']);
            $newProductType = taxonomy_term_load($newProductNode->field_product_type['und'][0]['tid']);
            $output['reason'] = 'tariffplan of '. $oldProductType->name. ' product type can not be pasted to '. $newProductType->name .' product type';
        }else{//success
            //create tariffplan node
            $tariffplanNode = clone $targetNode;
            $tariffplanNode->uid = $user->uid;
            $tariffplanNode->field_weight['und'][0]['value'] = $weight;
            $tariffplanNode->field_ref_product['und'][0]['nid'] = $productNid;
            _unset_unused_field_of_cloned_node($tariffplanNode);        
            $tariiffplanNode->title = _create_tariffplan_title($tariiffplanNode);
            node_save($tariffplanNode);        
            //create children for the new tariffplan
            //covers for basicrate_domestic, basicrate_idd, basicrate_data,basicrate_roaming,tariffplan_idd_carrier,rate content type        
            $view = views_get_view('query_tariffplan_children');
            $view->set_display('panel_pane_1');
            $view->set_arguments(array('0' => $targetNode->nid));
            $view->execute(); 
            
            $basicRates = array();
            $newTariffplanIddCarriers = array();
            $newRates = array();
            
            foreach($view->result as $record){
                $targetChildNid = $record->nid;
                $targetChildNode = node_load($targetChildNid);
                
                $childNode = clone $targetChildNode;
                $childNode->uid = $user->uid;
                $childNode->field_ref_product['und'][0]['nid'] = $productNid;
                $childNode->field_ref_tariffplan['und'][0]['nid'] = $tariffplanNode->nid;
                $childNode->field_ref_tree_nid['und'][0]['nid'] = $tariffplanNode->nid;
                _unset_unused_field_of_cloned_node($childNode);
                
                switch($childNode->type){
                    case 'basicrate_idd':                   
                    case 'basicrate_domestic':
                    case 'basicrate_roaming':
                        $basicRates[] = $childNode;
                        break;
                    case 'tariffplan_idd_carrier':
                        node_save($childNode);
                        $newTariffplanIddCarriers[$targetChildNode->nid] = $childNode->nid;
                        $tariffplan_idd_carriers[] = array('nid' => $childNode->nid);
                        break;
                    case 'rate':
                        node_save($childNode);
                        _clone_field_collection('node',$targetChildNode,$childNode,'field_charge_collection');
                        $newRates[$targetChildNode->nid] = $childNode->nid;
                        break;                
                }
            }
    
            foreach($basicRates as $newBasicRateNode){
                switch($newBasicRateNode->type){
                    case 'basicrate_idd':
                        $newBasicRateNode->field_ref_tariffplan_idd_carrier['und'][0]['nid'] = $newTariffplanIddCarriers[$newBasicRateNode->field_ref_tariffplan_idd_carrier['und'][0]['nid']];
                    break;
                }
                $newBasicRateNode->field_ref_rate['und'][0]['nid'] = $newRates[$newBasicRateNode->field_ref_rate['und'][0]['nid']];            
                node_save($newBasicRateNode);
            }
            
            //covers for actionpricechargefactors, actionpricediscountfactors, treenodespecialnumberscheme,
            //treenodepacketpredefined,treenodepacketdynamic,actionblockfactors, basicrate_data content type
            $view = views_get_view('query_tariffplan_children');
            $view->set_display('panel_pane_2');
            $view->set_arguments(array('0' => $targetNode->nid));
            $view->execute(); 
            foreach($view->result as $record){
               $targetChildNid = $record->nid;
               $targetChildNode = node_load($targetChildNid);
                
               $childNode = clone $targetChildNode;
               $childNode->uid = $user->uid;
               $childNode->field_ref_product['und'][0]['nid'] = $productNid;
               $childNode->field_ref_tree_nid['und'][0]['nid'] = $tariffplanNode->nid;
               
               _unset_unused_field_of_cloned_node($childNode);
               node_save($childNode);
               if(isset($targetChildNode->field_charge_collection)){
                    _clone_field_collection('node',$targetChildNode,$childNode,'field_charge_collection');
               }
               if(isset($targetChildNode->field_discount_collection)){
                    _clone_field_collection('node',$targetChildNode,$childNode,'field_discount_collection');
               }
               _clone_nested_child_node($targetChildNode,$childNode);
            }
            
            //save new tariffplan
            $tariffplanNode = node_load($tariffplanNode->nid);
            $tariffplanNode->field_ref_tariffplan_idd_carrier['und'] = $tariffplan_idd_carriers;
            node_save($tariffplanNode);    
            $output['success'] = TRUE;   
            
            //add new tariffplan json object in order to display in JS
            //$output['product_catalog_ajax_result'] = add_js_settings_after_node_save($tariffplanNode);
            $output['product_catalog_ajax_result_node'] = $tariffplanNode;
        }
    }  

    return $output;
}

function _paste_action($targetNode,$productNid,$baseTid,$weight){
    global $user;
    $targetRefTreeTid = $targetNode->field_ref_tree_tid['und'][0]['value'];
    if($targetRefTreeTid != $baseTid){//error diffrent voca
        $output['success'] = FALSE;
        $output['reason'] = 'Different event type item can not be pasted';
    }else{
        $oldProductNode = node_load($targetNode->field_ref_product['und'][0]['nid']);
        $newProductNode = node_load($productNid);
				
				if($oldProductNode->nid != $newProductNode->nid){
					$output['success'] = FALSE;
					$output['reason'] = 'Only action item in same product can be pasted';
				}else{//success
            //create action node
            $cloneNode = clone $targetNode;
            $cloneNode->uid = $user->uid;
            $cloneNode->field_weight['und'][0]['value'] = $weight;
            $cloneNode->field_ref_product['und'][0]['nid'] = $productNid;
            if($cloneNode->type == 'actionpricechargerecurring'){
							$recurring_charge_id = $newProductNode -> field_product_id['und'][0]['value'] . '_' . time();
							$cloneNode->field_recurring_charge_id['und'][0]['value'] = $recurring_charge_id;
							$cloneNode->field_recurring_charge_id['und'][0]['safe_value'] = $recurring_charge_id;
							//$cloneNode->title = 'temp';
						}
						_unset_unused_field_of_cloned_node($cloneNode); 
            node_save($cloneNode);   
						_clone_nested_child_node($targetNode,$cloneNode);     
						
						//covers for actionsetcounter,actionsetnotification,actionsetcounteronbonus,actionsetbonusonrecurringcharge
						$view = views_get_view('list_actions');
            $view->set_display('panel_pane_1');
            $view->set_arguments(array('0' => $targetNode->nid));
            $view->execute(); 
            foreach($view->result as $record){
               $targetActionNid = $record->nid;
               $targetActionNode = node_load($targetActionNid);
                
               $childNode = clone $targetActionNode;
               $childNode->uid = $user->uid;
               $childNode->field_ref_source_action['und'][0]['nid'] = $cloneNode->nid;
               _unset_unused_field_of_cloned_node($childNode);
               node_save($childNode);
            }
						
						$output['success'] = TRUE;   
            $output['product_catalog_ajax_result_node'] = $cloneNode;
        }
    }  

    return $output;
}

function _clone_nested_child_node($oldParentNode,$newParentNode){
    global $user;    
    $viewData = get_viewdata('query_tree_by_root_nid', $oldParentNode->nid);
    foreach ($viewData as $viewRow) {
       $targetChildNode = node_load($viewRow['nid']); 
       $childNode = clone $targetChildNode;
       $childNode->uid = $user->uid;
       _unset_unused_field_of_cloned_node($childNode);
       $childNode->field_parent_node['und'][0]['nid'] = $newParentNode->nid;
       node_save($childNode);
       if(isset($targetChildNode->field_charge_collection)){
            _clone_field_collection('node',$targetChildNode,$childNode,'field_charge_collection');
       }
       if(isset($targetChildNode->field_discount_collection)){
            _clone_field_collection('node',$targetChildNode,$childNode,'field_discount_collection');
       }
       _clone_nested_child_node($targetChildNode,$childNode);
    }
}

function product_catalog_ajax_paste_node($nodeId,$productId,$weight){
    ctools_include('node.pages', 'node', '');
    ctools_include('ajax');
    global $user;
    
    $weightStep = 100;
    $weight += $weightStep;
    $targetNid = session_get('copy_target_nid');
    $productNid = explode('_', $productId);
    $productNid = $productNid[1];
    $baseId = explode('_',$nodeId);    
    $baseTid = $baseId[1];
    
    if($targetNid == NULL){
        $output['success'] = FALSE;
        $output['reason'] = 'There is no copied item';
    }else{
        $targetNode = node_load($targetNid);    
        if($targetNode == NULL){
            $output['success'] = FALSE;
            $output['reason'] = 'The original item has been deleted';
        }else{
            switch($targetNode->type){
                case 'tariffplan':
                    $output = _paste_tariffplan($targetNode,$productNid,$baseTid,$weight);
                    $output['product_catalog_ajax_result'] = add_js_settings_after_node_save($output['product_catalog_ajax_result_node']);
                    unset($output['product_catalog_ajax_result_node']);
                    break;
							  case "actionpricechargeonetime":
								case "actionpricediscount":
								case "actionpriceallowanceonetime":
								case "actionpricechargerecurring":
										$output = _paste_action($targetNode,$productNid,$baseTid,$weight);
										$output['product_catalog_ajax_result'] = add_js_settings_after_node_save($output['product_catalog_ajax_result_node']);
                    unset($output['product_catalog_ajax_result_node']);
									break;
            }
        }
    }
    
    print json_encode($output);
    exit;
};

function product_catalog_ajax_copy_node($nodeId){
    ctools_include('ajax');
    $nid = explode('_',$nodeId);
    $nid = $nid[1];
    
    //$copyNode = node_load($nid);
    session_set('copy_target_nid',$nid);
        
    //$output = $copyNode->title . ' has been copied';
    $output = 'success';
    print json_encode($output);
    exit;
}

function product_catalog_ajax_select_modal_item_submit($contentTypes) {
	global $user;
	ctools_include('node.pages', 'node', '');
	ctools_include('modal');
	ctools_include('ajax');
	  
	$source_nid = $_POST['source_nid'];
	$nids = $_POST['nids'];
	$defaultTabIndex = $_POST['default_tab_index'];
	
    //delete existing node
    $source_action = node_load($source_nid);
    $source_tree_term = taxonomy_term_load($source_action->field_ref_tree_tid['und'][0]['value']);

    $deleteNids = array();
    switch($source_tree_term->name){
        case 'Bonus':
        case 'Charge':
            $view = views_get_view('list_actionsetnotification');
            $view->set_display('panel_pane_3');
            $view->set_arguments(array('0' => $source_nid));
            $view->execute();
            
            foreach($view->result as $record) {
                $deleteNids[] = $record->nid;
            }
            break;
        default:
            break;
    }
    
    if(!empty($deleteNids)){
        node_delete_multiple($deleteNids);
    }
    
	foreach($nids as $nid) {
		$actionsetnotification = new StdClass();
  	
		$actionsetnotification->uid = $user->uid;
		$actionsetnotification->type = 'actionsetnotification';
		$actionsetnotification->language = 'und';
		
		$actionsetnotification->field_ref_source_action['und'][0]['nid'] = $source_nid;
		$actionsetnotification->field_ref_messages['und'][0]['nid'] = $nid;
		
		node_save($actionsetnotification);
	}
	
	$output[] = ctools_modal_command_dismiss(t('Success'));
	$output = ajax_render($output);
	  
	print $output;
	exit;
}
 
function _create_qtabs_for_counter($nid, $args) {
    $productNid = get_root($nid);
    $product = node_load($productNid);
    $billing_type = taxonomy_term_load($product->field_billing_type['und'][0]['tid']);
    $service_domain = taxonomy_term_load($product->field_service_type_of_provider['und'][0]['tid']);
   
    if($billing_type->name == 'HYBRID') {
        $args[2] = 'all';
    } else {
        $args[2] = $billing_type->name;
    }
    $args[3] = $service_domain->name;

    $qtabs = array(
      array(
        'title' => t('Counter Selection'),
        'type' => 'view',
        'vid' => 'list_counter',
        'display' => 'panel_pane_3',
        'args' => join('/',$args),	// dummy args.
        'weight' => 0,
      ),
    );
    return $qtabs;
}

function product_catalog_ajax_counter_list() {
	
	global $user;
	$tempProductNid = explode('_',$_POST['product_nid']);
	$productNid = $tempProductNid[1];
	
	$counterNids = $_POST['counter_nids'];
	
	$params = array('0' => $productNid);
	$view = views_get_view('list_prdcounterlist');
	$view->set_display('panel_pane_1');
	$view->set_arguments($params);
	$view->execute();
	
	$record = current($view->result);
	$prdcounterlist = node_load($record->nid);
	
	if(isset($prdcounterlist->field_counter_list) 
		&& !empty($prdcounterlist->field_counter_list['und'])) {
		unset($prdcounterlist->field_counter_list['und']);
	};
	
	foreach($counterNids as $counterNid) {
		$prdcounterlist->field_counter_list['und'][] = array('nid' => $counterNid);
	}
	
	node_save($prdcounterlist);
	
	$js_settings = array(
		'success' => TRUE,
		'data' => 'success'
	);
		  
	drupal_add_js(array('product_catalog_ajax_result' => $js_settings), 'setting');
	  
	$renderOutput = '';
	$output[] = $renderOutput;
	$output = ajax_render($output);
	  
	print $output;
	exit;
}

function product_catalog_ajax_set_rollover() {
	
	global $user;
	$tempProductNid = explode('_',$_POST['product_nid']);
	$productNid = $tempProductNid[1];
	
	$nodeNid = $_POST['rollover_nid'];
	$rolloverWeight = $_POST['rollover_weight'];
	$rolloverRefProduct = $_POST['rollover_ref_product'];
	$rolloverRefTreeNid = $_POST['rollover_ref_tree_nid'];
	$rolloverRefTreeTid = $_POST['rollover_ref_tree_tid'];
	
	$counterNids = $_POST['counter_nids'];
	$rolloverFlag = $_POST['rollover_flag'];
	$happens = $_POST['happens'];
	$addOrReplace = $_POST['add_or_replace'];
	
	if(empty($nodeNid)) {
		$prdnonusagerollover = new StdClass();
		$prdnonusagerollover->uid = $user->uid;
		$prdnonusagerollover->type = 'prdnonusagerollover';
		$prdnonusagerollover->language = 'und';
		
		$prdnonusagerollover->field_ref_product['und'][0]['nid'] = $productNid;
		$prdnonusagerollover->field_ref_tree_tid['und'][0]['value'] = $rolloverRefTreeTid;
		$prdnonusagerollover->field_weight['und'][0]['value'] = $rolloverWeight;
		
	} else {
		$prdnonusagerollover = node_load($nodeNid);
	}
	
	if(isset($prdnonusagerollover->field_counter_list) 
		&& !empty($prdnonusagerollover->field_counter_list['und'])) {
		unset($prdnonusagerollover->field_counter_list['und']);
	};
	
	foreach($counterNids as $counterNid) {
		$prdnonusagerollover->field_counter_list['und'][] = array('nid' => $counterNid);
	}
	
	$prdnonusagerollover->field_user_for_rollover['und'][0]['value'] = isset($rolloverFlag)? $rolloverFlag: '0';
	$prdnonusagerollover->field_rollover_add_or_replace['und'][0]['value'] = isset($addOrReplace)? $addOrReplace: '0';
	$prdnonusagerollover->field_happens['und'][0]['value'] = isset($happens)? $happens: 'week';
	
	node_save($prdnonusagerollover);
	
	$jquery_select_id = 'node_'.$nodeNid;
	
	$js_settings = array(
		'success' => TRUE,
		'data' => array(
				'parentId' => 'term_'.$rolloverRefTreeTid.'_'.$productNid,
				'childId' => 'node_'.$prdnonusagerollover->nid,
				'title' => 'PrdNonUsageRollover',
				'contentType' => 'prdnonusagerollover',
				'weight' => $rolloverWeight
			),
	);
		  
	drupal_add_js(array('product_catalog_ajax_result' => $js_settings), 'setting');
	  
	$renderOutput = '';
	$output[] = $renderOutput;
	$output = ajax_render($output);
	
	print $output;
	exit;
}

function product_catalog_ajax_set_cardtype() {
	
	global $user;
	$tempProductNid = explode('_',$_POST['product_nid']);
	$productNid = $tempProductNid[1];
	
	$parentNid = $_POST['parent_nid'];
	$cardTypeNid = $_POST['cardtype_nid'];
	$cardTypeNids = $_POST['cardtype_nids'];
	
	if(empty($cardTypeNid)) {
		$cardtype = new StdClass();
		$cardtype->uid = $user->uid;
		$cardtype->type = 'conditionwhatcardtype';
		$cardtype->language = 'und';
		$cardtype->field_parent_node['und'][0]['nid'] = $parentNid;
	} else {
		$cardtype = node_load($cardTypeNid);
	}
	unset($cardtype->field_ref_cardtype);
	
	foreach($cardTypeNids as $cardTypeNid) {
		$cardtype->field_ref_cardtype['und'][] = array('nid' => $cardTypeNid);
	}
	node_save($cardtype);
	
	$jquery_select_id = 'node_'.$nodeNid;
	$js_settings = array(
		'success' => TRUE,
		'data' => array(
				'parentId' => 'node_'.$parentNid,
				'childId' => 'node_'.$cardtype->nid,
				'title' => $cardtype->title,
				'contentType' => 'conditionwhatcardtype',
				'weight' => '100',
			),
	);
	drupal_add_js(array('product_catalog_ajax_result' => $js_settings), 'setting');
	  
	$renderOutput = '';
	$output[] = $renderOutput;
	$output = ajax_render($output);
	
	print $output;
	exit;
}

function product_catalog_ajax_select_modal_content($js = NULL, $contentType, $nid, $defaultTabIndex, $additionalParam) {
	ctools_include('node.pages', 'node', '');
	ctools_include('modal');
	ctools_include('ajax');
	ctools_modal_add_js();
	
	if($contentType == 'actionsetnotification' || $contentType == 'vouchercardtypenotification' ) {
		$renderedView = views_embed_view('list_messages', 'panel_pane_1');
	}
	
	$output = array();
	$renderOutput = '<div id="modal_content" style="overflow:scroll;height:700px;">'.$renderedView.'</div>';
	
    switch($contentType){
        case 'actionsetnotification':
        	if( !empty($additionalParam) ) {
        		$refTreeTid = $defaultTabIndex;
        		$defaultTabIndex = $additionalParam;
        	}
        case 'vouchercardtypenotification':
            $renderOutput .= '<input type="button" id="vbo-message-select-button" value="Select"/>';
        break;
    }
    
	$output[] = ctools_modal_command_display('Notification Message Selection', $renderOutput);
	
	$output[] = ajax_command_invoke(NULL, 'selectModalButtonBinding', array('0' => $renderOutput, '1' => $nid, '2' => $defaultTabIndex, '3' => $refTreeTid));
	
	$output = ajax_render($output);
	print $output;
	exit;
}

function product_catalog_modal_restore_confirm($js = NULL,$fileId){
/*
settings =>
    ... (Array, 10 elements)
    source_id (String, 2 characters ) db
    destination_id (String, 6 characters ) manual
    file_id (String, 43 characters ) ProductCatalog-2013-04-30T12-35-32.mysql.gz
    confirm (Integer) 1
    submit (String, 7 characters ) Restore
    filters (Array, 2 elements)
    utils_site_offline (Integer) 0
    utils_site_offline_message (String, 103 characters ) Product Catalog is currently under maintenance....
    Product Catalog is currently under maintenance. We should be back shortly. Thank you for your patience.
    form_build_id (String, 48 characters ) form-1zzxwZJs5rIh2ZskcBsRGD_Za4szGjLjxLKPHoRZnS4
    form_token (String, 43 characters ) 6oSBAdL7RbpZZfkK8stY31NvD7_LgwsPhDp0acz8gjY
    form_id (String, 50 characters ) backup_migrate_ui_destination_restore_file_confirm | (Callback) backup_migrate_ui_destination_restore_file_confirm();
    op (String, 7 characters ) Restore
*/
    ctools_include('node.pages', 'node', '');
    ctools_include('ajax');
                
    backup_migrate_perform_restore('manual', $fileId, NULL);
    
    /*
    $output = array();
    $output[] = ctools_ajax_command_reload();
    $output = ajax_render($output);
    print $output;
    exit;
    */
    drupal_goto();
}

function product_catalog_ajax_upload_modal_content($js = NULL, $content_type, $addPram=NULL) {
	global $user;
	ctools_include('node.pages', 'node', '');
	ctools_include('modal');
	ctools_include('ajax');
	
	$formName = 'feeds_import_form';
	
	switch($content_type) {
		case 'locationfactor':
			$formTitle = 'Upload bulk Location information';
			$importerName = 'location_cellid_importer';
			break;
	}
	
	$form_state = array();
	if (!$js) {
		return drupal_get_form($formName);
	}
	$form_state['title'] = $formTitle;
	$form_state['ajax'] = 'TRUE';
	
	$form_state['build_info']['args'] = array($importerName);
	$form_state['build_info']['files'] = array('menu' => 'sites/all/modules/feeds/feeds.pages.inc');
	
	$output = ctools_modal_form_wrapper($formName, $form_state);
	
	if (!empty($form_state['executed'])) {
		$output = array();
		//$output[] = ctools_modal_command_display(t('Node created'),'<div class="modal-message">Node creation successful.</div>');
		$output[] = ctools_modal_command_dismiss();
		
		switch($contentType){
			case 'locationfactor':
				$output[] = ctools_ajax_command_reload();
				break;
		}
	}
	
	print ajax_render($output);
	exit;
	
}

function product_catalog_ajax_add_modal_content($js = NULL, $contentType, $refNodeNid, $refTreeTid, $addParam=NULL) {
	global $user;
	ctools_include('node.pages', 'node', '');
	ctools_include('modal');
	ctools_include('ajax');
	
	$node = (object) array(
			'uid' => $user->uid,
			'name' => (isset($user->name) ? $user->name : ''),
			'type' => $contentType,
			'language' => 'und',			
	);
	$form_state = array();
	
	switch($contentType){
		case 'actiondepositcondition':
			$node->field_ref_prddepositcondition['und'][0]['nid'] = $refNodeNid;
			break;
		case 'rate':
			$node->field_ref_tariffplan['und'][0]['nid'] = $refNodeNid;
			$node->field_ref_tree_tid['und'][0]['value'] = $refTreeTid;
			break;
		case 'domestic_ratinggroup':
			$node->field_ref_numberingplan_domestic['und'][0]['nid'] = $refNodeNid;
			break;
		case 'idd_ratinggroup':
			$node->field_ref_numberingplan_idd['und'][0]['nid'] = $refNodeNid;
			break;
        case 'roaming_ratinggroup':
        	$node->field_ref_roaming_plan['und'][0]['nid'] = $refNodeNid;
          break;
		case 'depositschemefactors':
		case 'depositschemeadjustment':
			$node->field_ref_depositscheme['und'][0]['nid'] = $refNodeNid;
			break;
		case 'thresholdschemefactors':
			$node->field_ref_thresholdscheme['und'][0]['nid'] = $refNodeNid;
			break;
		case 'loyaltypointfactors':
			$viewResult = views_get_view_result('list_loyaltypoint', 'panel_pane_1',$refNodeNid,$refTreeTid);
			$node->field_ref_loyaltypoint['und'][0]['nid'] = current($viewResult)->nid;
			break;
		case 'ocs_state_machine':
			$node->title = $refNodeNid;
			$node->field_lifecycle_scheme['und'][0]['nid'] = $refNodeNid;
			break;
		case 'treenodecounterforvoucher':
			$treeNodeTerm = taxonomy_get_term_by_name($refTreeTid, 'tpl_vouchercardtype');
			$svcDomainTerm = current($treeNodeTerm);
			$node->field_ref_vouchercardtype['und'][0]['nid'] = $refNodeNid;
			$node->field_ref_tree_tid['und'][0]['value'] = $svcDomainTerm->tid;
			break;
		case 'treenodecounterforvoucherprd':
			$node->field_ref_treenodeproductforvouc['und'][0]['nid'] = $refNodeNid;
			break;
		case 'actionsetcounter':
		case 'actionsetcounteronbonus':
		case 'actionsetbonusonrecurringcharge':
			$node->title = 'source_'.$refNodeNid;
			$node->field_ref_source_action['und'][0]['nid'] = $refNodeNid;
			$refNode = node_load($refNodeNid);
			$form_state['product_nid'] = $refNode->field_ref_product['und'][0]['nid'];
			break;
		case 'actionsetonthreshold':
			$node->title = 'action_'.$refNodeNid;
			$node->field_ref_treenodecounter['und'][0]['nid'] = $refNodeNid;
			break;
		case 'holidaylist_repeatable':
		case 'holidaylist_specific':
			$form_state['holidaylist_nid']= $refNodeNid;
			break;
		case 'numberspecialfactors':
			$node->field_ref_numberspecial['und'][0]['nid'] = $refNodeNid;
			break;
	    case 'roaming_zone':
	      $node->field_roaming_carrier['und'][0]['nid'] = $refNodeNid;
	      break;
	    case 'prddowngradepenalty':
	      $node->field_ref_product['und'][0]['nid'] = $refNodeNid;
	      break;
	    case 'mapbasicrateidd':
	      $node->field_ref_tariffplan_idd_carrier['und'][0]['nid'] = $addParam;
	      break;
    }
	
	if (!$js) {
		return drupal_get_form($contentType . '_node_form', $node);
	}
	$form_state['title'] = 'Add a new '.$contentType;
	$form_state['ajax'] = 'TRUE';
	
	$form_state['build_info']['args'] = array($node);
  
  switch($contentType){
    case 'mapbasicratedomestic':
	case 'mapbasicratedomesticincoming':
    case 'mapbasicrateroaming':
    case 'mapbasicrateidd':  
      $form_state['build_info']['args'][] = $refNodeNid;
      $form_state['build_info']['args'][] = $refTreeTid;
      break;
  }

	$formName = $contentType . '_node_form';

	$output = ctools_modal_form_wrapper($formName, $form_state);
	
	if (!empty($form_state['executed'])) {
		$output = array();
		//$output[] = ctools_modal_command_display(t('Node created'),'<div class="modal-message">Node creation successful.</div>');
		$output[] = ctools_modal_command_dismiss();
		
		switch($contentType){
			case 'domestic_ratinggroup':
				$planNode = node_load($refNodeNid);
				$planNode->field_ref_domestic_ratinggroup['und'][] = array('nid' => $form_state['values']['nid']);
				node_save($planNode);
				$output[] = ctools_ajax_command_reload();
				break;
			case 'idd_ratinggroup':
				$planNode = node_load($refNodeNid);
				$planNode->field_ref_idd_ratinggroup['und'][] = array('nid' => $form_state['values']['nid']);
				node_save($planNode);
				$output[] = ctools_ajax_command_reload();
				break;
            case 'roaming_ratinggroup':
                $planNode = node_load($refNodeNid);
                $planNode->field_ref_roaming_ratinggroup['und'][] = array('nid' => $form_state['values']['nid']);
                node_save($planNode);
                $output[] = ctools_ajax_command_reload();
                break;
			case 'numberspecialfactors':
				$output[] = _add_command_after_dismiss_modal($refNodeNid,$refTreeTid);
				break;
			case 'depositschemefactors':
			case 'depositschemeadjustment':
			case 'thresholdschemefactors':
			case 'area_code':
			case 'article':
			case 'ocs_state_machine':
			case 'holidaylist_repeatable':
			case 'holidaylist_specific':
			case 'locationfactor':
			case 'tvchannel':
			case 'homezonefactor':
            case 'roaming_zone':
            case 'prddowngradepenalty':
				$output[] = ctools_ajax_command_reload();
				break;
			case 'loyaltypointfactors':
			case 'actiondepositcondition':
				$defaultTabIndex = $addParam;
				$prdAttributeDepositCondition = node_load($refNodeNid);
				$refNodeNid = $prdAttributeDepositCondition->field_ref_product['und'][0]['nid'];
				$output[] = _add_command_after_dismiss_modal($refNodeNid,$refTreeTid,$defaultTabIndex);
				break;
				
			case 'actionsetcounter':
			case 'actionsetcounteronbonus':
			case 'actionsetbonusonrecurringcharge':
			case 'actionsetonthreshold':
				$defaultTabIndex = $refTreeTid;
				$refTreeTid = NULL;
				$output[] = _add_command_after_dismiss_modal($refNodeNid,$refTreeTid,$defaultTabIndex);
				break;
			
			case 'treenodecounterforvoucher':
				$refTreeTid = $form_state['values']['field_ref_tree_tid']['und'][0]['value'];
				$output[] = _add_command_after_dismiss_modal($refNodeNid,$refTreeTid,$defaultTabIndex);
				break;
			case 'treenodecounterforvoucherprd':
				$defaultTabIndex = $refTreeTid;
				$refTreeTid = NULL;
				$output[] = _add_command_after_dismiss_modal($refNodeNid,$refTreeTid,$defaultTabIndex);
				break;
			default : //for tree
				$output[] = _add_command_after_dismiss_modal($refNodeNid,$refTreeTid);
				break;
		}
	}
	else{
		if($contentType == 'rate'){
			$output[] = ajax_command_invoke(NULL, 'drawFlotLinkInit');
		}
	}
	
	print ajax_render($output);
	exit;
}

function product_catalog_ajax_select_submit() {
  global $user;
  
  $productNid = $_POST['product_nid'];
  $parentNid = $_POST['parent_nid'];
  $parentTitle = $_POST['parent_title'];
  $childNids = $_POST['child_nid'];
  $max_weight = $_POST['max_weight'];
  $min_weight = $_POST['min_weight'];
  $rel_type = $_POST['rel_type'];
  
  $weightStep = -100;
  $weight = $min_weight;
  
  $js_data = array();
  $js_data['parent_nid'] = $parentNid;
  $js_data['replace_or_append'] = 'append';
  $js_data['children'] = array();
  
  $tmpParentNid = explode('_', $parentNid);
  $tmpProductNid = explode('_',$productNid);
  
  foreach($childNids as $childNid) {
      $child = new StdClass();
      $child->uid = $user->uid;
      $child->language = 'und';
     
      if($tmpParentNid[0] == 'node') {
        $child->field_parent_node = array('und' => array(0 => array('nid' => $tmpParentNid[1])));
      } else if($tmpParentNid[0] == 'term') {
      	$child->field_ref_tree_tid = array('und' => array(0 => array('value' => $tmpParentNid[1])));
      }

      $weight += $weightStep;
      
      switch($rel_type) {
       case 'nonusage_unittransfer_scheme':
      	_remove_existing_children($tmpProductNid[1], $tmpParentNid[1]);
      	
      	$child->type = 'treenodeunittransferscheme';
      	$child->field_weight['und'][0]['value'] = $weight;
      	$child->field_ref_product['und'][0]['nid'] = $tmpProductNid[1];
      	$child->field_ref_unittransfer['und'][0]['nid'] = $childNid;
      	
      	node_save($child);
      	 
      	$js_data['parent_title'] = $child->title;
      	$js_data['append_to'] = 'inside';
      	$js_data['replace_or_append'] = 'replace';
      	
      	break;
	  case 'attribute_subscriber_lifecycle_scheme':
				_remove_existing_children($tmpProductNid[1], $tmpParentNid[1]);
      	
      	$child->type = 'treenodelifecyclescheme';
      	$child->field_weight['und'][0]['value'] = $weight;
      	$child->field_ref_product['und'][0]['nid'] = $tmpProductNid[1];
      	$child->field_lifecycle_scheme['und'][0]['nid'] = $childNid;
      	
      	node_save($child);
      	 
      	$js_data['parent_title'] = $child->title;
      	$js_data['append_to'] = 'inside';
      	$js_data['replace_or_append'] = 'replace';
      	break;
		
	  case 'counter_main':
	  	$child->type = 'treenodecounter';
      	
      	$term_tree = taxonomy_get_term_by_name('Main', 'countermainoraccu');
      	$child->field_main_or_accumulated['und'][0]['tid'] = current($term_tree)->tid;
      	
      	$child->field_ref_counter['und'][0]['nid'] = $childNid;
      	$child->field_weight['und'][0]['value'] = $weight;
      	$child->field_ref_product['und'][0]['nid'] = $tmpProductNid[1];
      	node_save($child);
      	$js_data['append_to'] = 'last';
      	break;
    
    case 'counter_shared':
		// _remove_existing_children($tmpProductNid[1], $tmpParentNid[1]);

		$child->type = 'treenodecounter'; 
		
		$term_tree = taxonomy_get_term_by_name('Main', 'countermainoraccu');
		$child->field_main_or_accumulated['und'][0]['tid'] = current($term_tree)->tid;
		
		$child->field_ref_counter['und'][0]['nid'] = $childNid;
		$child->field_weight['und'][0]['value'] = $weight;
		$child->field_ref_product['und'][0]['nid'] = $tmpProductNid[1];
		node_save($child);
		$js_data['append_to'] = 'last';
		// $js_data['replace_or_append'] = 'replace';
		
		break;
    			
	  case 'counter_accumulated':
        $child->type = 'treenodecounter';
        
        $term_tree = taxonomy_get_term_by_name('Accumulated', 'countermainoraccu');
        $child->field_main_or_accumulated['und'][0]['tid'] = current($term_tree)->tid;
         
        $child->field_ref_counter['und'][0]['nid'] = $childNid;
        $child->field_weight['und'][0]['value'] = $weight;           
        $child->field_ref_product['und'][0]['nid'] = $tmpProductNid[1];
        
        node_save($child);
        $js_data['append_to'] = 'last';
        break;
        
      case 'packaged_mandatory':
      	$child->type = 'prdattributepackaged';
      	$child->field_weight['und'][0]['value'] = $weight;
      	$child->field_ref_product['und'][0]['nid'] = $tmpProductNid[1];
      	$child->field_ref_connected_product['und'][0]['nid'] = $childNid;
      	
      	// $term = taxonomy_term_load($tmpParentNid[1]);
      	$term = taxonomy_get_term_by_name('Mandatory_MarketOpen','prdrelationtype');
      	$child->field_ref_prdrelationtype['und'][0]['tid'] = current($term)->tid;
      	
      	node_save($child);
      	$js_data['append_to'] = 'inside';
      	break;
			case 'packaged_optional':
        $child->type = 'prdattributepackaged';
        $child->field_weight['und'][0]['value'] = $weight;
        $child->field_ref_product['und'][0]['nid'] = $tmpProductNid[1];
        $child->field_ref_connected_product['und'][0]['nid'] = $childNid;
        
        $term = taxonomy_get_term_by_name('Optional', 'prdrelationtype');
        $child->field_ref_prdrelationtype['und'][0]['tid'] = current($term)->tid;
        
        node_save($child);
        $js_data['append_to'] = 'inside';
        break;
        
    	case 'packaged_hidden':
        $child->type = 'prdattributepackaged';
        $child->field_weight['und'][0]['value'] = $weight;
        $child->field_ref_product['und'][0]['nid'] = $tmpProductNid[1];
        $child->field_ref_connected_product['und'][0]['nid'] = $childNid;
        
                $term = taxonomy_get_term_by_name('Mandatory_MarketHidden','prdrelationtype');
        $child->field_ref_prdrelationtype['und'][0]['tid'] = current($term)->tid;
        
        node_save($child);
        
        $js_data['append_to'] = 'inside';
        break;
     
    case 'member_product':
		$child->type = 'prdattributepackaged';
		$child->field_weight['und'][0]['value'] = $weight;
		$child->field_ref_product['und'][0]['nid'] = $tmpProductNid[1];
		$child->field_ref_connected_product['und'][0]['nid'] = $childNid;

		$term = taxonomy_get_term_by_name('CUG_Member','prdrelationtype');
		$child->field_ref_prdrelationtype['und'][0]['tid'] = current($term)->tid;
		
		node_save($child);
		$js_data['append_to'] = 'inside';
		break;
		
	case 'packaged_product':
		$child->type = 'prdattributepackaged';
		$child->field_weight['und'][0]['value'] = $weight;
		$child->field_ref_product['und'][0]['nid'] = $tmpProductNid[1];
		$child->field_ref_connected_product['und'][0]['nid'] = $childNid;
		
		// $term = taxonomy_term_load($tmpParentNid[1]);
		$term = taxonomy_get_term_by_name('Packaged','prdrelationtype');
		$child->field_ref_prdrelationtype['und'][0]['tid'] = current($term)->tid;
		
		node_save($child);
		$js_data['append_to'] = 'inside';
	break;
	
	case 'available_product':
  		$child->type = 'prdattributepackaged';
  		$child->field_weight['und'][0]['value'] = $weight;
  		$child->field_ref_product['und'][0]['nid'] = $tmpProductNid[1];
  		$child->field_ref_connected_product['und'][0]['nid'] = $childNid;
		
  		// $term = taxonomy_term_load($tmpParentNid[1]);
  		$term = taxonomy_get_term_by_name('Mandatory_MarketOpen','prdrelationtype');
  		$child->field_ref_prdrelationtype['und'][0]['tid'] = current($term)->tid;
  	
  		node_save($child);
  		$js_data['append_to'] = 'inside';
	break;
  	  
  	case 'discount_voucher_product_specific':
      	$voucharcardtype = node_load($tmpProductNid[1]);

      	$child->type = 'treenodeproductfordisvoucher';
      	$child->field_weight['und'][0]['value'] = $weight;
      	$child->field_ref_vouchercardtype['und'][0]['nid'] = $tmpProductNid[1];
      	$child->field_ref_product['und'][0]['nid'] = $childNid;
      	node_save($child);
      	
      	_create_treenodecounterforvoucherprd($child, $childNid);
      	
      	$js_data['append_to'] = 'inside';
      	
      	break;
  	  
      case 'voucher_product_specific':
      	$voucharcardtype = node_load($tmpProductNid[1]);
      	$voucherTypeTerm = taxonomy_term_load($voucharcardtype->field_ref_voucher_type['und'][0]['tid']);
      	
      	$child->type = 'treenodeproductforvoucher';
      	$child->field_weight['und'][0]['value'] = $weight;
      	$child->field_ref_vouchercardtype['und'][0]['nid'] = $tmpProductNid[1];
      	$child->field_ref_product['und'][0]['nid'] = $childNid;
      	node_save($child);
      	
      	// _create_treenodecounterforvoucherprd($child, $childNid);
      	
      	$js_data['append_to'] = 'inside';
      	
      	// voucher card type에서 type이 Discount일 때에는 product가 하나만 선택될 수 있도록 변경 
      	if($voucherTypeTerm->name == 'Discount') {
			$js_data['replace_or_append'] = 'replace';
			
			// delete existing .. 
			$view = views_get_view('list_treenodeproductforvoucher');
			$view->set_display('panel_pane_1');
			$view->set_arguments(array('0' => $tmpProductNid[1]));
			$view->execute();
			
			foreach($view->result as $record) {
				if($child->nid != $record->nid) {
					node_delete($record->nid);
				}
			}
      	}
      	
      	break;

	  case 'nonusage_deposit':
      	_remove_existing_children($tmpProductNid[1], $tmpParentNid[1]);
      	 
      	$child->type = 'treenodedepositscheme';
      	$child->field_weight['und'][0]['value'] = $weight;
      	$child->field_ref_product['und'][0]['nid'] = $tmpProductNid[1];
      	$child->field_ref_depositscheme['und'][0]['nid'] = $childNid;
      	 
      	node_save($child);
      	
      	$js_data['parent_title'] = $child->title;
      	$js_data['append_to'] = 'inside';
      	$js_data['replace_or_append'] = 'replace';
      	break;

      case 'nonusage_threshold':
      	_remove_existing_children($tmpProductNid[1], $tmpParentNid[1]);
      	
      	$child->type = 'treenodethresholdscheme';
      	$child->field_weight['und'][0]['value'] = $weight;
      	$child->field_ref_product['und'][0]['nid'] = $tmpProductNid[1];
      	$child->field_ref_thresholdscheme['und'][0]['nid'] = $childNid;
      	
      	node_save($child);
      	
      	$js_data['parent_title'] = $child->title;
      	$js_data['append_to'] = 'inside';
      	$js_data['replace_or_append'] = 'replace';
      	break;
      	
      case 'nonusage_recharge_additional':
      	$child->type = 'treenodevouchercardforproduct';
      	$child->field_weight['und'][0]['value'] = $weight;
      	$child->field_ref_product['und'][0]['nid'] = $tmpProductNid[1];
      	$child->field_ref_vouchercardtype['und'][0]['nid'] = $childNid;
      	 
      	node_save($child);
      	
      	$js_data['append_to'] = 'inside';
      	break;
		
      case 'nonusage_otheronetimecharge':
	        $child->type = 'treenodeotheronetimecharge';
	        $child->field_weight['und'][0]['value'] = $weight;
	        $child->field_ref_product['und'][0]['nid'] = $tmpProductNid[1];
	        $child->field_ref_otherontimecharge['und'][0]['tid'] = $childNid;
	        node_save($child);        
	        $js_data['append_to'] = 'inside';
      	break;
      
      case 'nonusage_otheronetimecharge_discount_on_main':
      		//error_log('here');
      		$child->type = 'treenodeotheronetimechargediscou';
          $child->field_weight['und'][0]['value'] = $weight;
          $child->field_ref_product['und'][0]['nid'] = $tmpProductNid[1];
          $child->field_ref_otherontimecharge['und'][0]['tid'] = $childNid;
          
          node_save($child);
          $js_data['append_to'] = 'inside';
      	break;
      	
      case 'voice_tariffplan_specialnumber':
      case 'sms_tariffplan_specialnumber':
        $planNode = node_load($tmpParentNid[2]);
				//delete old treenodespecialnumberscheme
				$viewResult = views_get_view_result('list_treenodespecialnumberscheme', 'panel_pane_1', $tmpProductNid[1]);
				foreach($viewResult as $item){
					node_delete($item->nid);
				}
        
        $child->type = 'treenodespecialnumberscheme';
        $child->field_weight['und'][0]['value'] = $weight;
        $child->field_ref_product['und'][0]['nid'] = $tmpProductNid[1];
        $child->field_ref_numberspecial['und'][0]['nid'] = $childNid;
        $child->field_ref_tree_nid['und'][0]['nid'] = $planNode->nid;
        node_save($child);
        $planNode->field_ref_numberspecial['und'][0]['nid'] = $childNid;
        node_save($planNode);
        $js_data['parent_title'] = $child->title;
        $js_data['append_to'] = 'inside';
        $js_data['replace_or_append'] = 'replace';
        break;
		
      case 'data_tariffplan_predefined':
	  case 'cross_mobile_data_tariffplan_predefined':
        $planNode = node_load($tmpParentNid[2]);
        $child->type = 'treenodepacketpredefined';
        $child->field_weight['und'][0]['value'] = $weight;
        $child->field_ref_product['und'][0]['nid'] = $tmpProductNid[1];
        $child->field_ref_tree_nid['und'][0]['nid'] = $planNode->nid;
        $child->field_ref_packet_predefined['und'][0]['nid'] = $childNid;
        $child->field_ref_tariffplan['und'][0]['nid'] = $planNode->nid;
        node_save($child);        
        $js_data['append_to'] = 'inside'; 
        break;
      
      case 'data_tariffplan_dynamic':
	  case 'cross_mobile_data_tariffplan_dynamic':
        $planNode = node_load($tmpParentNid[2]);
        $child->type = 'treenodepacketdynamic';
        $child->field_weight['und'][0]['value'] = $weight;
        $child->field_ref_product['und'][0]['nid'] = $tmpProductNid[1];
        $child->field_ref_tree_nid['und'][0]['nid'] = $planNode->nid;
        $child->field_ref_packet_dynamic['und'][0]['nid'] = $childNid;
        $child->field_ref_tariffplan['und'][0]['nid'] = $planNode->nid;
        node_save($child);        
        $js_data['append_to'] = 'inside'; 
        break;
		
      case 'attribute_required_device':
        $child->type = 'prdattributerequireddevice';
        $child->field_weight['und'][0]['value'] = $weight;
        $child->field_ref_product['und'][0]['nid'] = $tmpProductNid[1];
        $child->field_ref_device_class['und'][0]['tid'] = $childNid;
        node_save($child);        
        $js_data['append_to'] = 'inside'; 
        break;
      case 'attribute_available_channel':
        $child->type = 'prdattributeavailablechannel';
        $child->field_weight['und'][0]['value'] = $weight;
        $child->field_ref_product['und'][0]['nid'] = $tmpProductNid[1];
        $child->field_ref_tvchannel['und'][0]['nid'] = $childNid;
        node_save($child);        
        $js_data['append_to'] = 'inside'; 
        break;
      case 'attribute_allowed_device':
        $child->type = 'prdattributeallowedmodel';
        $child->field_weight['und'][0]['value'] = $weight;
        $child->field_ref_product['und'][0]['nid'] = $tmpProductNid[1];
        $child->field_ref_device_model['und'][0]['nid'] = $childNid;
        node_save($child);        
        $js_data['append_to'] = 'inside'; 
        break;
      case 'unittransfer':
        $child->type = 'unittransferfactor';
        $child->field_weight['und'][0]['value'] = $weight;
        $child->field_counter_group['und'][0]['tid'] = $childNid;
        node_save($child);    
				$unit_transfer_node = node_load($tmpParentNid[1]);    
				$unit_transfer_node->field_ref_unittransferfactors['und'][] = array('nid' => $child->nid);
				node_save($unit_transfer_node);
        $js_data['append_to'] = 'inside'; 
        break;
      case 'attribute_featurecode':
        $child->type = 'prdattributefeaturecode';
        $child->field_weight['und'][0]['value'] = $weight;
        $child->field_ref_product['und'][0]['nid'] = $tmpProductNid[1];
        $child->field_ref_service_feature_code['und'][0]['tid'] = $childNid;
        node_save($child);        
        $js_data['append_to'] = 'inside'; 
        break;
      }
      $js_data['children'][] = get_children_stored_procedure($child->nid,$parentNid);
  }

  $js_settings = array(
  	'success' => TRUE,
	'data' => $js_data
  );
  
  drupal_add_js(array('product_catalog_ajax_result' => $js_settings), 'setting');
  
  $renderOutput = '';
  $output[] = $renderOutput;
  $output = ajax_render($output);
  
  print $output;
  exit;
}

function _remove_existing_children($root_nid, $refTreeTid) {
	$nodes = get_1st_children_nids_by_in_tree($root_nid, $refTreeTid);
	node_delete_multiple($nodes);
	
}

// 해당 voucher 용 product에서 사용 가능한 counter를 모두 가져온다.
// 주의 : basic counter에서 receive_ 는 제외
function _select_treenodecounterforvoucherprd($treenodeproductforvoucher) {

	// 해당 voucher card type for product에 속한 counter를 모두 선택한다.
	$voucherPrd = node_load($treenodeproductforvoucher);
	$refProductNid = $voucherPrd->field_ref_product['und'][0]['nid'];
	
	$params = array('0' => $refProductNid);
	$view = views_get_view('list_prdcounterlist');
	$view->set_display('panel_pane_2');
	$view->set_arguments($params);
	$view->execute();
	
	$counterNids = array();
	foreach($view->result as $record) {
		$counterNids[] = view_get_field_value_by_label($view, 'qtabConfigNid', $record);
	}
	
	// Prepaid면서 Basic , Optional인 counter만 걸러낸다.
	$params = array('0' => join('+',$counterNids));
	$view = views_get_view('query_list_counter');
	$view->set_display('panel_pane_4');
	$view->set_arguments($params);
	$view->execute();
	$counterList = array();
	foreach($view->result as $record) {
		$counterList[] = $record->nid;
	}
	
	// 해당 상품의 basic counter를 가져옴.
	// $product = node_load($productNid);
	$counter_list = _get_default_basic_counters_without_receive($productNid);
	foreach($counter_list as $key => $value) {
		$counterList[] = $key;
	}
	
	return $counterList;
}

// 선택된 product의 counter만큼
// 
function _create_treenodecounterforvoucherprd($treenodeproductforvoucher, $productNid){
	global $user;
	
	// 해당 상품의 optional counter를 가져옴.
	$params = array('0' => $productNid);
	$view = views_get_view('list_prdcounterlist');
	$view->set_display('panel_pane_2');
	$view->set_arguments($params);
	$view->execute();
	
	$counterNids = array();
	foreach($view->result as $record) {
		//$counterList[] = view_get_field_value_by_label($view, 'qtabConfigNid', $record);
		$counterNids[] = view_get_field_value_by_label($view, 'qtabConfigNid', $record);
	}
	
	// Prepaid면서 Basic , Optional인 counter만 걸러낸다.
	$params = array('0' => join('+',$counterNids));
	$view = views_get_view('query_list_counter');
		$view->set_display('panel_pane_4');
	$view->set_arguments($params);
	$view->execute();
	$counterList = array();
	foreach($view->result as $record) {
		$counterList[] = $record->nid;
	}
	
	// 해당 상품의 basic counter를 가져옴.
	// $product = node_load($productNid);
	$counter_list = _get_default_basic_counters($productNid);
    foreach($counter_list as $key => $value) {
		$counterList[] = $key;
	}
	
	foreach($counterList as $record) {
		$treenodecounterforvoucherprd = new StdClass();
		$treenodecounterforvoucherprd->type = 'treenodecounterforvoucherprd';
		$treenodecounterforvoucherprd->uid = $user->uid;
		$treenodecounterforvoucherprd->language = 'und';
		$treenodecounterforvoucherprd->field_ref_counter['und'][0]['nid'] = $record;
		$treenodecounterforvoucherprd->field_ref_treenodeproductforvouc['und'][0]['nid'] = $treenodeproductforvoucher->nid;
		node_save($treenodecounterforvoucherprd);
	}
	
}

// [arg], [Exclude]일 경우, 해당 collection name에 해당하는 qtab configration을 읽어서 replace arg를 위한 result값을 보내준다.
// 
function _get_view_result_qtabConfgNid($collectionName, $args) {

	$resultArr = array();
	$qtabConfigs = _qtabconfig_loading($collectionName, $args['termInTree']);
	
	if(isset($args['qtabIndex'])) {
		$qtabConfig = $qtabConfigs[$collectionName][$args['qtabIndex']];
	} else {
		$qtabConfig = $qtabConfigs[$collectionName][0];
	}
	
	$tmpView = views_get_view($qtabConfig['content']);
	
	$view = views_get_view($qtabConfig['content']);
	$view->set_display($qtabConfig['display']);
	
	if(isset($qtabConfig['args'])) {
		$newArgs = _replace_arguments($qtabConfig['args'], $qtabConfig, $args);
	}
	$tempArgs = explode('/', $newArgs);
	
	foreach($tempArgs as $tmpArg){
		$arguments[] = $tmpArg;
	}
	
	$view->set_arguments($arguments);
	$view->execute();
	$results = $view->result;
	
	foreach($results as $record) {
		$resultArr[] = view_get_field_value_by_label($view, 'qtabConfigNid', $record);
	}
	
	return $resultArr;
}

// 	$args = array(
// 			'qtabIndex' => $qtabIndex,
// 			'termInTree' => $termInTree,
// 			'id' => $id,
// 			'rootId' => $rootId
// 	);
function _replace_arguments($origArgs, $qtabConfig, $args) {

	$newArgString = $origArgs;
	$qtabConfigArgList = explode('/', $origArgs);
	$reservedArgList = array('$productNid', '$tariffplanNid','$voucherCardTypeNid','$nid', '$unitTransferNid', '$numberSpecialNid','$numberSpecialNidForDetail','[arg]', '[Exclude]', '[Include]', '$refTreeTid');

	$matchedArgList = array_intersect($qtabConfigArgList, $reservedArgList);
	
	foreach($matchedArgList as $matchedArg) {
		switch($matchedArg) {
			case '$productNid':
			case '$tariffplanNid' :
			case '$voucherCardTypeNid' :
            case '$unitTransferNid':
				$newArgString = str_replace($matchedArg, $args['rootId'], $newArgString);
				break;
			case '$nid':
			case '$refTreeTid':
				$newArgString = str_replace($matchedArg, $args['id'], $newArgString);
				break;			
			case '[arg]':
				$collectionName = 'field_qtabs_click_arguments';
				$result = _get_view_result_qtabConfgNid($collectionName, $args);
				
				if(!empty($result)) {
					$newArgString = str_replace($matchedArg, join(',', $result), $newArgString);
				} else {
					$newArgString = str_replace('/'.$matchedArg, '', $newArgString);
				}
				break;
				
			case '[Exclude]':
				$collectionName = 'field_qtabs_right_click_exclude';
				$result = _get_view_result_qtabConfgNid($collectionName, $args);
				
				if(!empty($result)) {
					$newArgString = str_replace($matchedArg, join(',', $result), $newArgString);
				} else {
					$newArgString = str_replace('/'.$matchedArg, '', $newArgString);
				}
				break;
				
			case '[Include]':
				$collectionName = 'field_qtabs_right_click_include';
				$result = _get_view_result_qtabConfgNid($collectionName, $args);
				
			
				if(!empty($result)) {
					$newArgString = str_replace($matchedArg, join(',', $result), $newArgString);
				} else {
					$newArgString = str_replace('/'.$matchedArg, '', $newArgString);
				}
				break;
			case '$numberSpecialNid':
				$newArgString = str_replace($matchedArg, $args['rootId'], $newArgString);
				break;
            case '$numberSpecialNidForDetail':
                $newArgString = str_replace($matchedArg, $args['id'], $newArgString);
                break;
			default:
				break;
		}
	}
	return $newArgString;
}

function _qtabconfig_loading($collectionName, $termInTree) {
	$qtabConfigs = array();
	
	$tempCmd = '$loadingInfos = $termInTree->'.$collectionName."['und'];";
	eval($tempCmd);
	
	foreach($loadingInfos as $loadingInfo) {
		
		$collectionItem = field_collection_item_load($loadingInfo['value']);

		$qtabConfig = array(
			'title' => !empty($collectionItem->field_tab_title)? $collectionItem->field_tab_title['und'][0]['safe_value']: '',
			'type' => !empty($collectionItem->field_tab_type)? $collectionItem->field_tab_type['und'][0]['value']: '',
			'content' => !empty($collectionItem->field_tab_content)? $collectionItem->field_tab_content['und'][0]['safe_value']: '',
			'display' => !empty($collectionItem->field_view_display)? $collectionItem->field_view_display['und'][0]['safe_value']: '',
			'args'	=> !empty($collectionItem->field_view_arguments)? $collectionItem->field_view_arguments['und'][0]['safe_value']: ''  
		);
		$qtabConfigs[$collectionName][] = $qtabConfig;
	}
	return $qtabConfigs;
}

function product_catalog_ajax_load_select_form($nid,$eventType,$rootNid,$relType,$defaultTabIndex=0){
	
	$rootId = explode('_',$rootNid);
	$rootId = $rootId[1];
	$rootNode = node_load($rootId);
	
	$id = explode('_',$nid);
	$nodeOrTerm = $id[0];
	// term 일 경우에만 id 가 term_111_222 형태로 넘어온다. node 일 경우는 node_111 형태임
	// 따라, term 일 경우에만 rootid 를 가장 가까운 상위의 node instance 의 nid로 setting
	if(isset($id[2])){
		$rootId = $id[2];
	}
	//id 를 prefix 제거하고 setting
	$id = $id[1];

	switch($eventType){
		case 'click':
			$targetCollection = 'field_qtabs_click';
			break;
		case 'right_click':
			$targetCollection = 'field_qtabs_right_click';
			break;
	}
	
	switch($nodeOrTerm) {
		case 'node':
			$termInTree = taxonomy_get_term_by_name($relType, 'tpl_node_qtab_info');
			$termInTree = current($termInTree);
			break;
		case 'term':
			$termInTree = taxonomy_term_load($id);
			break;
	}
	
	$qtabConfigs = _qtabconfig_loading($targetCollection, $termInTree);
	
	$qtabs = array();
    $weight = 0;
  
    $index = 0;
	$qtabIndex = 0;
    foreach($qtabConfigs[$targetCollection] as $qtabConfig) {
			if(isset($qtabConfig['args'])) {
				$args = array(
						'qtabIndex' => $qtabIndex,
						'termInTree' => $termInTree,
						'id' => $id,
						'rootId' => $rootId
				);
	            $newArgs = _replace_arguments($qtabConfig['args'],  $qtabConfig, $args);
			}else {
				$newArgs = array();
			}
			
			switch($qtabConfig['type']) {
	      case 'node':
	      	break;
	      case 'block':
	      	break;
	      case 'view':
					switch($relType){
						case 'packaged_mandatory':
						case 'packaged_optional':
						case 'packaged_hidden':
						case 'packaged_product':
							//exclusiveness 에 설정 된 product 제외
							$temp_new_args = explode('/',$newArgs);
							//find exclusive products
							$product_node = node_load($rootId);
							if($relType == 'packaged_product'){
								$temp_exclusive_products = isset($product_node->field_exclusiveness['und'])?$product_node->field_exclusiveness['und']:NULL;
							}else{
								$temp_exclusive_products = isset($product_node->field_exclusiveness_others['und'])?$product_node->field_exclusiveness_others['und']:NULL;
							}
							$exclusive_products = array();
							foreach($temp_exclusive_products as $item){
								$exclusive_products[] = $item['nid'];
							}
							
							if(isset($temp_new_args[1])){
								$temp_array = explode(',',$temp_new_args[1]);
								foreach($temp_array as $item){
									$exclusive_products[] = $item;
								}
							}
							$exclusive_products = array_unique($exclusive_products);
							$temp_new_args[1] = join(',',$exclusive_products);
							if(!empty($temp_new_args[1])){
								$newArgs = join('/',$temp_new_args);
							}
							break;
					}
	      	$qtabs[] = array(
            'title' => $qtabConfig['title'],
            'type' => 'view',
            'vid' => $qtabConfig['content'],
            'display' => $qtabConfig['display'],
          	'args' => $newArgs,
          	'weight' => $weight
          );
	      	break;
	      case 'callback':
					// treenodecounter에서 선불이 PostPaid일 때에는 필요없음.
					if($nodeOrTerm == 'node') {
						if($relType == 'tree_node_counter_main_basic' || $relType == 'tree_node_counter_main_optional') {
							$treeNodeCounter = node_load($id);
							$refCounter = node_load($treeNodeCounter->field_ref_counter['und'][0]['nid']);
							$billingTypeCounter = taxonomy_term_load($refCounter->field_billing_type_counter['und'][0]['tid']);
							if($billingTypeCounter->name == 'Prepaid') continue;
						}
					}
					$args = array(
	      			'qtabIndex' => $qtabIndex,
	      			'termInTree' => $termInTree,
	      			'id' => $id,
	      			'rootId' => $rootId
	      	);
	      	$newArgs = _replace_arguments($qtabConfig['content'], $qtabConfig, $args);
		
	      	$qtabs[] = array(
	      		'title' => $qtabConfig['title'],
	      		'type' => 'callback',
	      		'path' => $newArgs,
	      		'weight' => $weight
	      	);				
					break;
	    }
	    $weight = $weight + 1;
	    $qtabIndex = $qtabIndex + 1;
    }
	
    $qtoptions = array(
    	'ajax' => FALSE,
    	'style' => 'zen',
    	//'renderer' => 'ui_tabs'
    );
	
	if(isset($defaultTabIndex)) {
		$qtoptions['default_tab'] = $defaultTabIndex;
    }
	
    $quicktabs = quicktabs_build_quicktabs('qtab_dummy',$qtoptions,$qtabs);
    
    $qtRender =  drupal_render($quicktabs['content']);
    
    if( empty($qtRender)) {
    	$qtRender = "No Item to be Rendered";
    }
    $renderOutput = '<div id="tree_content_div" style="overflow:scroll;height:716px;">'.$qtRender.'</div>';
    
    $output[] = $renderOutput;
    $output = ajax_render($output);
    
    print $output;
    exit;
}

function product_catalog_ajax_load_product_relations($termName, $nid, $defaultTabIndex=0){

	$termInTree = taxonomy_get_term_by_name($termName, 'tpl_relations_qtabs');
	$targetCollection = 'field_qtabs_default';
	$qtabConfigs = _qtabconfig_loading($targetCollection, current($termInTree));
	
	$qtabs = array();
  $weight = 0;
  $index = 0;
	$qtabIndex = 0;
	
	foreach($qtabConfigs[$targetCollection] as $qtabConfig) {

		switch($qtabConfig['type']) {
            case 'node':
            	break;
            	
            case 'block':
            	break;
            	
            case 'callback':
            	$replacedContent = str_replace('$nid', $nid, $qtabConfig['content']);
            	
            	$qtabs[] = array(
            		'title' => $qtabConfig['title'],
            		'type' => 'callback',
            		'path' => $replacedContent,
            		'weight' => $weight,
            	);
            	break;
            case 'view':
              $qtabs[] = array(
                'title' => $qtabConfig['title'],
                'type' => 'view',
                'vid' => $qtabConfig['content'],
                'display' => $qtabConfig['display'],
              	'args' => $newArgs,
              	'weight' => $weight
              );
            	break;
        }
        $weight = $weight + 1;
        $qtabIndex = $qtabIndex + 1;
    }
	
    $qtoptions = array(
    	'ajax' => FALSE,
    	'style' => 'zen',
    	//'renderer' => 'ui_tabs'
    );
	
	if(isset($defaultTabIndex)) {
		$qtoptions['default_tab'] = $defaultTabIndex;
    }
	
    $quicktabs = quicktabs_build_quicktabs('qtab_dummy',$qtoptions,$qtabs);
    $qtRender =  drupal_render($quicktabs['content']);

    $renderOutput = '<div id="relation_product_group_div" style="overflow:scroll;height:700px;">'.$qtRender.'</div>';
    return $renderOutput;
}

function product_catalog_ajax_move_node($js = NULL ) {

    $nodes = $_POST['nodes'];
    $parent = $_POST['parent'];

    foreach($nodes as $node) {
    	$tempArr = explode('_', $node['nid']);
    	$nid = $tempArr[1];    	
    	$temp_node = node_load($nid);    	
    	$temp_node->field_weight['und'][0]['value'] = $node['weight'];
        node_save($temp_node);       
    }

    if($parent['changed'] == 'true') {    	
        $temp_node = node_load($nodes[0]['nid']);
        $temp_node->field_parent_node['und'][0]['nid'] = $parent['nid'];
        node_save($temp_node);
    }

    print json_encode("{'return' : true}");    
    exit;
}

function product_catalog_ajax_load_tree($js = NULL, $rootNid) {

    //$children = get_children($rootNid);
    $rootNode = node_load($rootNid);
    switch($rootNode->type){
		case 'simpleproductoffering':
		case 'vouchercardtype':
		case 'number_special':
		   	$children = _load_tree_item_mixed_with_node_and_term($rootNode);	    	
	    break;
		default:
	    	$children = get_children_stored_procedure($rootNid);
	    break;
	}
    print json_encode($children); 
    exit;
}

function product_catalog_ajax_add_content($js = NULL) {
	global $user;
	ctools_include('node.pages', 'node', '');
	ctools_include('ajax');

	$rootId = $_POST['root_id'];
	$rootNid = explode('_',$rootId);
	$rootNid = $rootNid[1];
	$parentId = $_POST['parent_id'];
	$parentNid = explode('_',$parentId);
	$refTreeNid = isset($parentNid[2])?$parentNid[2]:NULL;
	$parentType = $parentNid[0];
	$parentNid = $parentNid[1];
	$childContentType = $_POST['child_content_type'];
	$maxWeight = $_POST['max_weight'];
	$usageType = $_POST['usage_type'];
	$nonUsageType = $_POST['nonusage_type'];
	
	$weightStep = 100;
	$weight = $maxWeight + $weightStep;
	
	switch ($childContentType){
	
		/*
		case 'conditionwhatnonusagetypefactors':        	 
			$child = new StdClass();
    		$child->uid = $user->uid;
    		$child->type = $childContentType;
    		$child->language = 'und';
    		$child->field_parent_node = array('und' => array(0 => array('nid' => $parentNid)));
    		$child->field_weight = array('und' => array(0 => array('value' => $weight)));

            $nonUsageTypeTerm = taxonomy_get_term_by_name($nonUsageType, 'nonusagetype');
			$child->field_ref_nonusage_type = array('und' => array(0 => array('tid' => current($nonUsageTypeTerm)->tid)));
			node_save($child);

            // js tree node add function call
    		$output = array('parent_id' => $parentId, 'child_id' => 'node_'.$child->nid,'title' => $child->title, 'node_type' => $child->type, 'weight' => $weight);
    		print json_encode($output);
    		exit;
            break;
     */
     
		case 'conditioncommonand':
					$child = new StdClass();
		    		$child->uid = $user->uid;
		    		$child->type = $childContentType;
		    		$child->language = 'und';
		    		$child->field_parent_node = array('und' => array(0 => array('nid' => $parentNid)));
		    		$child->field_weight = array('und' => array(0 => array('value' => $weight)));
		    		node_save($child);
		    		
		    		$parent = node_load($parentNid);
		    		$child->parent_nid = $parentNid;
		    		$rel_type = _get_rel_type_on_condition($child);
		    		
		    		// js tree node add function call
		    		$output = array('parent_id' => $parentId, 'child_id' => 'node_'.$child->nid,'title' => $child->title, 'node_type' => $child->type, 'rel_type' => $rel_type, 'weight' => $weight);
		    		print json_encode($output);
		    		exit;
		    		break;
				
    // case 'conditionwhatincomingcall':
		// case 'conditionwhencustomerbirthday':
		// case 'conditionwhencompanybirthday':
		// case 'conditionwhereissamezone':
			// create without popup
			/*
    		$child = new StdClass();
    		$child->uid = $user->uid;
    		$child->type = $childContentType;
    		$child->language = 'und';
    		$child->field_parent_node = array('und' => array(0 => array('nid' => $parentNid)));
    		$child->field_weight = array('und' => array(0 => array('value' => $weight)));
    		node_save($child);

    		// js tree node add function call
    		$output = array('parent_id' => $parentId, 'child_id' => 'node_'.$child->nid,'title' => $child->title, 'node_type' => $child->type, 'weight' => $weight);
    		print json_encode($output);
    		exit;
    		break;
    */
    	
		default:    		
    		if($refTreeNid == NULL) $refTreeNid = $parentNid;
    		$qtabs = array();
    		
    		$path = 'tree/create/'.$childContentType.'/'.$parentType.'/'.$parentNid.'/'.$weight.'/'.$rootNid.'/'.$refTreeNid;
			$qtabs[] = array(
    				'title' => 'Add',
    				'type' => 'callback',
    				'path' => $path,
    				'weight' => 0
    		);
    		$qtoptions = array(
    				'ajax' => FALSE,
    				'style' => 'zen',
    		);
    		
    		$quicktabs = quicktabs_build_quicktabs('qtab_dummy',$qtoptions,$qtabs);
    		$qtRender =  drupal_render($quicktabs['content']);
    		
			$renderOutput = '<div id="tree_content_div" style="overflow:scroll;height:716px;">'.$qtRender.'</div>';
			$output[] = $renderOutput;
			$output = ajax_render($output);
			print $output;
		    exit; 
    		break;
    }    
}

function product_catalog_ajax_delete_from_tree($js = NULL){
	ctools_include('node.pages', 'node', '');
	ctools_include('ajax');
	
	$deleteNodes = $_POST['nodes'];
	$deleteNids = array();
	foreach($deleteNodes as $delItem){
		$delItem = explode('_',$delItem);
		if($delItem[0] == 'node'){
			$deleteNids[] = $delItem[1];
		}
	}
	
	$url = array();
	$fullpath = '';
	if(!empty($deleteNids)) {
		$node = node_load($deleteNids[0]);
		
		$url = _get_redirect_url_in_delete($node);
	}
	$fullpath = '/'.$url['path'];
	$fullpath .= !empty($url['fragment'])? '#'.$url['fragment'] : '';
	node_delete_multiple($deleteNids);
	
	$output = array('return' => true, 'urlpath' => $fullpath);

	print json_encode($output);
	exit;
}

function product_catalog_ajax_edit_content($js = NULL, $contentType, $nodeNid) {
	module_load_include('inc','node','node.pages');
	$nodeNid = explode('_',$nodeNid);
	$nodeNid = $nodeNid[1];
	
    $qtabs = array();
    $path = 'tree/edit/'.$nodeNid;
    
    $qtabs[] = array(
    		'title' => 'Edit',
    		'type' => 'callback',
    		'path' => $path,
    		'weight' => 0
    );
    $qtoptions = array(
    		'ajax' => FALSE,
    		'style' => 'zen',
    );
    
    $quicktabs = quicktabs_build_quicktabs('qtab_dummy',$qtoptions,$qtabs);
    $qtRender =  drupal_render($quicktabs['content']);
    
    $renderOutput = '<div id="tree_content_div" style="overflow:scroll;height:716px;">'.$qtRender.'</div>';
    $output[] = $renderOutput;
	$output = ajax_render($output);
	print $output;
    exit;    
}

function product_catalog_modal_form_view($formName,$param1=NULL){
	ctools_include('node.pages', 'node', '');
	ctools_include('modal');
	ctools_include('ajax');
	
	$param = array();
	switch($formName){
		case 'timetable_selectable_form':
			$param['timetable_nid'] = $param1;
			$param['editable'] = FALSE;
			break;
		case 'numberingplan_domestic_view_form':
		case 'numberingplan_idd_view_form':
    case 'roamingplan_view_form':
			$param['plan_nid'] = $param1;
			break;
		case 'depositscheme_view_form':
			$param['depositscheme_nid'] = $param1;
			break;
		case 'thresholdscheme_view_form':
			$param['thresholdscheme_nid'] = $param1;
			break;
	}
		
	$form_state = array(
		'ajax' => TRUE,
		'param' => $param
	);
	
	$output = ctools_modal_form_wrapper($formName, $form_state);
	
	switch($formName){
		case 'timetable_selectable_form':
			$output[] = ajax_command_invoke(NULL, 'disableSelectable');
			break;
	}
	
	print ajax_render($output);
	exit;
}

function product_catalog_modal_view_link($content_type, $nid){
	
	// product_catalog_modal_form_view('depositscheme_view_form');
	ctools_include('node.pages', 'node', '');
	ctools_include('modal');
	ctools_include('ajax');
	
	if($content_type == 'treenodelifecyclescheme') {
		$qtabs = array(
		 	'0' => array( 'title' => 'Permission',
					'type' => 'view',
					'vid'  => 'ocs_svc_perm',
					'display' => 'panel_pane_3',
					'args' => $nid 
				),
			'1' => array( 'title' => 'Transition Rules',
						'type' => 'view',
						'vid' 	=> 'ocs_state_machine',
						'display' => 'panel_pane_2',
						'args'	=> $nid
				),
		);
	}
	
	$qtoptions = array(
    	'ajax' => FALSE,
    	'style' => 'zen',
    	'renderer' => 'ui_tabs'
    );
	
	/*
	if(isset($defaultTabIndex)) {
		$qtoptions['default_tab'] = $defaultTabIndex;
    }
	 */
	
    $quicktabs = quicktabs_build_quicktabs('qtab_dummy',$qtoptions,$qtabs);
    $qtRender =  drupal_render($quicktabs['content']);
	$renderOutput = '<div id="tree_content_div" style="overflow:scroll;height:716px;">'.$qtRender.'</div>';
	
	$output = array();
	$output[] = ctools_modal_command_display('Subscriber Lifecycle Scheme', $renderOutput);
	$output = ajax_render($output);
	print $output;
	exit;
}

function product_catalog_modal_form_edit_modal_content($js = NULL, $contentType, $nodeNid, $refNodeNid = NULL, $refTreeTid = NULL, $addParam = NULL) {
    ctools_include('node.pages', 'node', '');
    ctools_include('modal');
    ctools_include('ajax');
	
    $node = node_load($nodeNid);
    
    $form_state = array();
	switch($contentType) {
		case 'actionsetcounter':
		case 'actionsetcounteronbonus':
		case 'actionsetbonusonrecurringcharge':
			$refNode = node_load($refNodeNid);
			$form_state['product_nid'] = $refNode->field_ref_product['und'][0]['nid'];
			break;
	}
	
	if (!$js) {
        return drupal_get_form($contentType . '_node_form', $node);
    }

    $form_state['ajax'] = TRUE;
	$form_state['build_info']['args'] = array($node);
	
    $output = ctools_modal_form_wrapper($contentType . '_node_form', $form_state);

    if (!empty($form_state['executed'])) {
        $output = array();
        $output[] = ctools_modal_command_dismiss();
		
        switch($node->type){
        	case 'rate':
        		$refNodeNid = $node->field_ref_tariffplan['und'][0]['nid'];
        		$refTreeTid = $node->field_ref_tree_tid['und'][0]['value'];
        		$output[] = _add_command_after_dismiss_modal($refNodeNid,$refTreeTid);
        		break;
        	case 'loyaltypointfactors':
        		$defaultTabIndex = $addParam;
		       	$output[] = _add_command_after_dismiss_modal($refNodeNid,$refTreeTid,$defaultTabIndex);
		       	break;
        	case 'actiondepositcondition':
        		$prdAttributeDepositCondition = node_load($refNodeNid);
        		$refNodeNid = $prdAttributeDepositCondition->field_ref_product['und'][0]['nid'];
        		$defaultTabIndex = $addParam;
        		$output[] = _add_command_after_dismiss_modal($refNodeNid,$refTreeTid,$addParam);
        		break;
        	case 'numberspecialfactors':
        		$output[] = _add_command_after_dismiss_modal($refNodeNid,$refTreeTid);
				break;	
        	case 'domestic_ratinggroup':
        	case 'idd_ratinggroup':
            case 'roaming_ratinggroup':
        	case 'depositschemefactors':
        	case 'depositschemeadjustment':
        	case 'thresholdschemefactors':
			case 'holidaylist_specific':
			case 'holidaylist_repeatable':
        	case 'area_code':
        	case 'article':
			case 'locationfactor':
			case 'tvchannel':
			case 'homezonefactor':
            case 'roaming_zone':
            case 'prddowngradepenalty':
            case 'ocs_ussd_code':
				$output[] = ctools_ajax_command_reload();
				break;
			case 'actionsetcounter':
			case 'actionsetcounteronbonus':
			case 'actionsetbonusonrecurringcharge':
			case 'actionsetonthreshold':
				$defaultTabIndex = $refTreeTid;
				$refTreeTid = NULL;
				$output[] = _add_command_after_dismiss_modal($refNodeNid,$refTreeTid,$defaultTabIndex);
				break;
			case 'treenodecounterforvoucher':
				$refTreeTid = $form_state['values']['field_ref_tree_tid']['und'][0]['value'];
				$output[] = _add_command_after_dismiss_modal($refNodeNid,$refTreeTid,$defaultTabIndex);
				break;
			case 'treenodecounterforvoucherprd':
				$defaultTabIndex = $refTreeTid;
				$refTreeTid = NULL;
				$output[] = _add_command_after_dismiss_modal($refNodeNid,$refTreeTid,$defaultTabIndex);
				break;
        }
        
    }else{
    	if($contentType == 'rate'){
    		$output[] = ajax_command_invoke(NULL, 'drawFlotLinkInit');
    	}
    }
    
    print ajax_render($output);
    exit;
}

function product_catalog_ajax_delete_from_view($nodeNid, $refNodeNid, $additionalParam=NULL, $indexParam = NULL){
	ctools_include('node.pages', 'node', '');
	ctools_include('ajax');
	
	$node = node_load($nodeNid);
	$output = array();
	
	switch($node->type){
		case 'rate':
		case 'numberspecialfactors';
			$output[] = _add_command_after_dismiss_modal($refNodeNid,$additionalParam);
			break;
		case 'loyaltypointfactors':
			$refTreeTid = $additionalParam;
			$defaultTabIndex = $indexParam;
			$output[] = _add_command_after_dismiss_modal($refNodeNid,$refTreeTid,$defaultTabIndex);
			break;
		case 'actiondepositcondition':
			$prdAttributeDepositCondition = node_load($refNodeNid);
			$refNodeNid = $prdAttributeDepositCondition->field_ref_product['und'][0]['nid'];
			$refTreeTid = $additionalParam;
			$defaultTabIndex= $indexParam;
			$output[] = _add_command_after_dismiss_modal($refNodeNid,$refTreeTid,$defaultTabIndex);
			break;
		case 'domestic_ratinggroup':
		case 'idd_ratinggroup':
        case 'roaming_ratinggroup':
		case 'depositschemefactors':
		case 'depositschemeadjustment':
		case 'thresholdschemefactors':
		case 'area_code':
		case 'locationfactor':
		case 'tvchannel':
		case 'holidaylist_repeatable':
		case 'holidaylist_specific':
        case 'prddowngradepenalty':
        case 'timetable':
        case 'vouchercardtype':
        case 'unittransfer':
        case 'packetpredefinedchargingrule':
        case 'packetdynamicchargingrule':
        case 'packetdynamicl4':
        case 'packetsgsn':
        case 'packetsgsnip':
        case 'ocs_ussd_code':
			$output[] = ctools_ajax_command_reload();
			break;
		case 'actionsetcounter':
		case 'actionsetcounteronbonus':
		case 'actionsetbonusonrecurringcharge':
        case 'actionsetonthreshold' :
        	//additional param means default tab index
			$output[] = _add_command_after_dismiss_modal($refNodeNid,NULL,$additionalParam);
			break;
		case 'actionsetnotification':
			if( isset($indexParam) ) {
				$actionsetNotificationNode = node_load($refNodeNid);
				$refNodeNid = $actionsetNotificationNode->field_ref_vouchercardtype['und'][0]['nid'];
				$output[] = _add_command_after_dismiss_modal($refNodeNid,$additionalParam,$indexParam);
			} else {
				$output[] = _add_command_after_dismiss_modal($refNodeNid,NULL,$additionalParam);
			}
			break;
		case 'treenodecounterforvoucher':
			$treeNodeCounter = node_load($nodeNid);
			$refTreeTid = $treeNodeCounter->field_ref_tree_tid['und'][0]['value'];
			$output[] = _add_command_after_dismiss_modal($refNodeNid,$refTreeTid,$defaultTabIndex);
			break;
		case 'treenodecounterforvoucherprd':
			$defaultTabIndex = $additionalParam;
			$refTreeTid = NULL;
			$output[] = _add_command_after_dismiss_modal($refNodeNid,$refTreeTid,$defaultTabIndex);
			break;
	}
	
	node_delete($nodeNid);		
	print ajax_render($output);
	//print json_encode($output);
	exit;
}

function _unset_unused_field_of_cloned_node($node){
    unset($node->vid);
    unset($node->nid);
    unset($node->log);
    unset($node->status);
    unset($node->comment);
    unset($node->promote);
    unset($node->sticky);
    unset($node->created);
    unset($node->changed);
    unset($node->tnid);
    unset($node->translate);
    unset($node->revision_timestamp);
    unset($node->revision_uid);
    unset($node->rdf_mapping);
    unset($node->cid);
    unset($node->last_comment_timestamp);
    unset($node->last_comment_name);
    unset($node->last_comment_uid);
    unset($node->comment_count);
    unset($node->name);
    unset($node->picture);
    unset($node->data);    
		unset($node->field_attribute_key_value);
		unset($node->field_charge_collection);
		unset($node->field_deposit_amount_collection);
		unset($node->field_discount_collection);
		unset($node->field_prefix_range);
		unset($node->field_required_device);
		unset($node->field_parameterized);
    return $node;
}

function _copy_product_basic_counter_condition($product_nid){
	$product = node_load($product_nid);
	$base_treenodecounter = array();
	$view_result = views_get_view_result('list_treenodecounter', 'panel_pane_4', $product->nid);
	foreach($view_result as $item){
		$treenodecounter = node_load($item->nid);
		$real_counter = node_load($treenodecounter->field_ref_counter['und'][0]['nid']);
		$real_counter_type = taxonomy_term_load($real_counter->field_counter_type['und'][0]['tid']);
		if($real_counter_type->name == 'Basic'){
			$base_treenodecounter[$real_counter->nid] = $treenodecounter;
		}
	}
	
	$view_result = views_get_view_result('list_product_for_basic_counter_setting_copy', 'panel_pane_1'
		, $product->field_service_type_of_provider['und'][0]['tid']
		, $product->field_product_type['und'][0]['tid']
		, $product->field_billing_type['und'][0]['tid']
		, $product->nid);
	
	foreach($view_result as $target_product){
		$treenodecounter_result = views_get_view_result('list_treenodecounter', 'panel_pane_4', $target_product->nid);
		foreach($treenodecounter_result as $item){
			$treenodecounter = node_load($item->nid);
			$real_counter_nid = $treenodecounter->field_ref_counter['und'][0]['nid'];
			if(isset($base_treenodecounter[$real_counter_nid])){
				//delete old children
				$delete_children = get_nested_children_nids($treenodecounter->nid);
				$delete_children = array_unique($delete_children); 
				if(!empty($delete_children)){
					node_delete_multiple($delete_children);
				}
				
				//copy children from base to target	
				_clone_nested_child_node($base_treenodecounter[$real_counter_nid],$treenodecounter);
			}
		}
		
	}
}
?>
