<?php
module_load_include('inc', 'product_catalog_ajax', 'custom_submit');
module_load_include('inc', 'product_catalog_ajax', 'create_modal_link');
// ---------------------------------------------------------------------------
// Drupal hooks.
// jangsun
 
/**
 *  Implementation of hook_menu()
 */
function product_catalog_ajax_menu() {

  $items['product_catalog_ajax/%ctools_js/add'] = array(
      'title' => 'Add New',
      'page callback' => 'product_catalog_ajax_add_content',
      'page arguments' => array(1),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,  
  );     
  $items['product_catalog_ajax/%ctools_js/add_modal/%'] = array(
      'title' => 'Add New',
      'page callback' => 'product_catalog_ajax_add_modal_content',
      'page arguments' => array(1,3),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
  );
  $items['product_catalog_ajax/delete_from_view/%'] = array(
      'title' => 'Delete',
      'page callback' => 'product_catalog_ajax_delete_from_view',
      'page arguments' => array(2),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
  );
  $items['product_catalog_ajax/%ctools_js/edit/%'] = array(
      'title' => 'Edit',
      'page callback' => 'product_catalog_ajax_edit_content',
      'page arguments' => array(1,3),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
  ); 
  $items['product_catalog_ajax/%ctools_js/edit_modal/%'] = array(
      'title' => 'Edit',
      'page callback' => 'product_catalog_modal_form_edit_modal_content',
      'page arguments' => array(1,3),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
  );  
  $items['product_catalog_ajax/view_modal/%'] = array(
  		'title' => 'View',
  		'page callback' => 'product_catalog_modal_form_view',
  		'page arguments' => array(2),
  		'access callback' => TRUE,
  		'type' => MENU_CALLBACK,
  );
  $items['product_catalog_ajax/%ctools_js/delete_from_tree'] = array(
      'title' => 'Delete',
      'page callback' => 'product_catalog_ajax_delete_from_tree',
      'page arguments' => array(1),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
  );
  $items['product_catalog_ajax/%ctools_js/loadTree/%'] = array(
      'title' => 'Load Tree',
      'page callback' => 'product_catalog_ajax_load_tree',
      'page arguments' => array(1,3),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
  );
  $items['product_catalog_ajax/%ctools_js/move_node'] = array(
      'title' => 'Edit',
      'page callback' => 'product_catalog_ajax_move_node',
      'page arguments' => array(1),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
  );
  $items['product_catalog_ajax/load_select_form/%'] = array(
      'title' => 'Select Form',
      'page callback' => 'product_catalog_ajax_load_select_form',
      'page arguments' => array(2),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
  );
  $items['product_catalog_ajax/select_item'] = array(
  	  'title' => 'Select Form Submit',
      'page callback' => 'product_catalog_ajax_select_submit',
      //'page arguments' => array(2),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
  );
  $items['product_catalog_ajax/custom_submit'] = array(
  		'title' => 'Custom Submit',
  		'page callback' => 'product_catalog_ajax_custom_submit',
  		//'page arguments' => array(2),
  		'access callback' => TRUE,
  		'type' => MENU_CALLBACK,
  );
  $items['product_catalog_ajax/counter_list'] = array(
  		'title' => 'Set Counter List',
  		'page callback' => 'product_catalog_ajax_counter_list',
  		'access callback' => TRUE,
  		'type' => MENU_CALLBACK,
  );
  return $items;

} 
 
function _create_qtabs_for_counter($nid, $args) {
    $productNid = get_root($nid);
    $product = node_load($productNid);
    $billing_type = taxonomy_term_load($product->field_billing_type['und'][0]['tid']);
    $service_domain = taxonomy_term_load($product->field_service_type_of_provider['und'][0]['tid']);
   
    if($billing_type->name == 'HYBRID') {
        $args[2] = 'all';
    } else {
        $args[2] = $billing_type->name;
    }
    $args[3] = $service_domain->name;

    $qtabs = array(
      array(
        'title' => t('Counter Selection'),
        'type' => 'view',
        'vid' => 'list_counter',
        'display' => 'panel_pane_3',
        'args' => join('/',$args),	// dummy args.
        'weight' => 0,
      ),
    );
    return $qtabs;
}

function product_catalog_ajax_counter_list() {
	
	global $user;
	$tempProductNid = explode('_',$_POST['product_nid']);
	$productNid = $tempProductNid[1];
	
	$counterNids = $_POST['counter_nids'];
	
	$params = array('0' => $productNid);
	$view = views_get_view('list_prdcounterlist');
	$view->set_display('panel_pane_1');
	$view->set_arguments($params);
	$view->execute();
	
	$record = current($view->result);
	$prdcounterlist = node_load($record->nid);
	
	if(isset($prdcounterlist->field_counter_list) 
		&& !empty($prdcounterlist->field_counter_list['und'])) {
		unset($prdcounterlist->field_counter_list['und']);
	};
	
	foreach($counterNids as $counterNid) {
		$prdcounterlist->field_counter_list['und'][] = array('nid' => $counterNid);
	}
	
	node_save($prdcounterlist);
	
	$js_settings = array(
		'success' => TRUE,
		'data' => 'success'
	);
		  
	drupal_add_js(array('product_catalog_ajax_result' => $js_settings), 'setting');
	  
	$renderOutput = '';
	$output[] = $renderOutput;
	$output = ajax_render($output);
	  
	print $output;
	exit;
}
  
function product_catalog_ajax_add_modal_content($js = NULL, $contentType, $refNodeNid, $refTreeTid) {
	global $user;
	ctools_include('node.pages', 'node', '');
	ctools_include('modal');
	ctools_include('ajax');
	
	dsm($contentType, 'contentType');
	dsm($nodeNid, '$nodeNid');
	dsm($refNodeNid, '$refNodeNid');
	dsm($refTreeTid, '$refTreeTid');
	
	$node = (object) array(
			'uid' => $user->uid,
			'name' => (isset($user->name) ? $user->name : ''),
			'type' => $contentType,
			'language' => 'und',			
	);
	$form_state = array();

	switch($contentType){
		case 'rate':
			$node->field_ref_tariffplan['und'][0]['nid'] = $refNodeNid;
			$node->field_ref_tree_tid['und'][0]['value'] = $refTreeTid;
			break;
		case 'domestic_ratinggroup':
			$node->field_ref_numberingplan_domestic['und'][0]['nid'] = $refNodeNid;
			break;
		case 'idd_ratinggroup':
			$node->field_ref_numberingplan_idd['und'][0]['nid'] = $refNodeNid;
			break;
		case 'depositschemefactors':
		case 'depositschemeadjustment':
			$node->field_ref_depositscheme['und'][0]['nid'] = $refNodeNid;
			break;
		case 'thresholdschemefactors':
			$node->field_ref_thresholdscheme['und'][0]['nid'] = $refNodeNid;
			break;
		case 'loyaltypointfactors':
			$viewResult = views_get_view_result('list_loyaltypoint', 'panel_pane_1',$refNodeNid);
			$node->field_ref_loyaltypoint['und'][0]['nid'] = current($viewResult)->nid;
			break;
		case 'ocs_state_machine':
			$node->title = $refNodeNid;
			$node->field_lifecycle_scheme['und'][0]['nid'] = $refNodeNid;
			break;
		case 'actionsetcounter':
		case 'actionsetcounteronbonus':
			$node->title = 'source_'.$refNodeNid;
			$node->field_ref_source_action['und'][0]['nid'] = $refNodeNid;
			
			$refNode = node_load($refNodeNid);
			$form_state['product_nid'] = $refNode->field_ref_product['und'][0]['nid'];
			break;
		
		case 'numberspecialfactors':
			$node->field_ref_numberspecial['und'][0]['nid'] = $refNodeNid;
			break;
	}
	
	if (!$js) {
		return drupal_get_form($contentType . '_node_form', $node);
	}
	$form_state['title'] = 'Add a new '.$contentType;
	$form_state['ajax'] = 'TRUE';
		
	$form_state['build_info']['args'] = array($node);
	$formName = $contentType . '_node_form';

	$output = ctools_modal_form_wrapper($formName, $form_state);

	if (!empty($form_state['executed'])) {
		$output = array();
		//$output[] = ctools_modal_command_display(t('Node created'),'<div class="modal-message">Node creation successful.</div>');
		$output[] = ctools_modal_command_dismiss();
		
		switch($contentType){
			case 'domestic_ratinggroup':
				$planNode = node_load($refNodeNid);
				$planNode->field_ref_domestic_ratinggroup['und'][] = array('nid' => $form_state['values']['nid']);
				node_save($planNode);
				$output[] = ctools_ajax_command_reload();
				break;
			case 'idd_ratinggroup':
				$planNode = node_load($refNodeNid);
				$planNode->field_ref_idd_ratinggroup['und'][] = array('nid' => $form_state['values']['nid']);
				node_save($planNode);
				$output[] = ctools_ajax_command_reload();
				break;
			case 'numberspecialfactors':
				$output[] = _add_command_after_dismiss_modal($refNodeNid,$refTreeTid);
				break;
			case 'depositschemefactors':
			case 'depositschemeadjustment':
			case 'thresholdschemefactors':
			case 'area_code':
			case 'ocs_state_machine':
				$output[] = ctools_ajax_command_reload();
				break;
			case 'actionsetcounter':
				$defaultTabIndex = $refTreeTid;
				$output[] = _add_command_after_dismiss_modal($refNodeNid,$refTreeTid,$defaultTabIndex);
				break;
			case 'actionsetcounteronbonus':
				$defaultTabIndex = $refTreeTid;
				$output[] = _add_command_after_dismiss_modal($refNodeNid,$refTreeTid,$defaultTabIndex);
				break;
			default : //for tree
				$output[] = _add_command_after_dismiss_modal($refNodeNid,$refTreeTid);
				break;
		}
		
		//dsm($output,'output');
	}
	else{
		if($contentType == 'rate'){
			$output[] = ajax_command_invoke(NULL, 'drawFlotLinkInit');
		}
	}
	
	print ajax_render($output);
	exit;	
}

function product_catalog_ajax_select_submit() {
  global $user;
  
  $productNid = $_POST['product_nid'];
  $parentNid = $_POST['parent_nid'];
  $parentTitle = $_POST['parent_title'];
  $childNids = $_POST['child_nid'];
  $max_weight = $_POST['max_weight'];
  $min_weight = $_POST['min_weight'];
  $rel_type = $_POST['rel_type'];

  $weightStep = -100;
  $weight = $min_weight;
  
  $js_data = array();
  $js_data['parent_nid'] = $parentNid;
  $js_data['replace_or_append'] = 'append';
  $js_data['children'] = array();
  
  $tmpParentNid = explode('_', $parentNid);
  $tmpProductNid = explode('_',$productNid);
  
  foreach($childNids as $childNid) {
      $child = new StdClass();
      $child->uid = $user->uid;
      $child->language = 'und';
     
      if($tmpParentNid[0] == 'node') {
        $child->field_parent_node = array('und' => array(0 => array('nid' => $tmpParentNid[1])));
      } else if($tmpParentNid[0] == 'term') {
      	$child->field_ref_tree_tid = array('und' => array(0 => array('value' => $tmpParentNid[1])));
      }

      $weight += $weightStep;

      switch($rel_type) {
      case 'mobile_nonusage_unittransfer_scheme':
      	_remove_existing_children($tmpProductNid[1], $tmpParentNid[1]);
      	
      	$child->type = 'treenodeunittransferscheme';
      	$child->field_weight['und'][0]['value'] = $weight;
      	$child->field_ref_product['und'][0]['nid'] = $tmpProductNid[1];
      	$child->field_ref_unittransfer['und'][0]['nid'] = $childNid;
      	
      	node_save($child);
      	 
      	$js_data['parent_title'] = $child->title;
      	$js_data['append_to'] = 'inside';
      	$js_data['replace_or_append'] = 'replace';
      	
      	break;
      case 'mobile_counter_main':
      	$child->type = 'treenodecounter';
      	
      	$term_tree = taxonomy_get_term_by_name('Main', 'countermainoraccu');
      	$child->field_main_or_accumulated['und'][0]['tid'] = current($term_tree)->tid;
      	
      	$child->field_ref_counter['und'][0]['nid'] = $childNid;
      	$child->field_weight['und'][0]['value'] = $weight;
      	$child->field_ref_product['und'][0]['nid'] = $tmpProductNid[1];
      	node_save($child);
      	$js_data['append_to'] = 'last';
      	break;
      	
	  case 'mobile_counter_accumulated':
        $child->type = 'treenodecounter';
        
        $term_tree = taxonomy_get_term_by_name('Accumulated', 'countermainoraccu');
        $child->field_main_or_accumulated['und'][0]['tid'] = current($term_tree)->tid;
         
        $child->field_ref_counter['und'][0]['nid'] = $childNid;
        $child->field_weight['und'][0]['value'] = $weight;           
        $child->field_ref_product['und'][0]['nid'] = $tmpProductNid[1];
        
        node_save($child);
        $js_data['append_to'] = 'last';
        break;
        
      case 'mobile_packaged_mandatory':
      	$child->type = 'prdattributepackaged';
      	$child->field_weight['und'][0]['value'] = $weight;
      	$child->field_ref_product['und'][0]['nid'] = $tmpProductNid[1];
      	$child->field_ref_connected_product['und'][0]['nid'] = $childNid;
      	
      	// $term = taxonomy_term_load($tmpParentNid[1]);
      	$term = taxonomy_get_term_by_name('Mandatory_MarketOpen','prdrelationtype');
      	$child->field_ref_prdrelationtype['und'][0]['tid'] = current($term)->tid;
      	
      	node_save($child);
      	$js_data['append_to'] = 'inside';
      	break;
      case 'cross_available_product':
  		$child->type = 'prdattributepackaged';
  		$child->field_weight['und'][0]['value'] = $weight;
  		$child->field_ref_product['und'][0]['nid'] = $tmpProductNid[1];
  		$child->field_ref_connected_product['und'][0]['nid'] = $childNid;
  	
  		// $term = taxonomy_term_load($tmpParentNid[1]);
  		$term = taxonomy_get_term_by_name('Mandatory_MarketOpen','prdrelationtype');
  		$child->field_ref_prdrelationtype['und'][0]['tid'] = current($term)->tid;
  	
  		node_save($child);
  		$js_data['append_to'] = 'inside';
  	  break;
      case 'mobile_packaged_optional':
      	$child->type = 'prdattributepackaged';
      	$child->field_weight['und'][0]['value'] = $weight;
      	$child->field_ref_product['und'][0]['nid'] = $tmpProductNid[1];
      	$child->field_ref_connected_product['und'][0]['nid'] = $childNid;
      	
      	$term = taxonomy_get_term_by_name('Optional', 'prdrelationtype');
      	$child->field_ref_prdrelationtype['und'][0]['tid'] = current($term)->tid;
      	
      	node_save($child);
      	$js_data['append_to'] = 'inside';
        break;
      	 
      case 'mobile_packaged_hidden':
      	$child->type = 'prdattributepackaged';
      	$child->field_weight['und'][0]['value'] = $weight;
      	$child->field_ref_product['und'][0]['nid'] = $tmpProductNid[1];
      	$child->field_ref_connected_product['und'][0]['nid'] = $childNid;
      	
      	$term = taxonomy_get_term_by_name('Mandatory_MarketHidden','prdrelationtype');
      	$child->field_ref_prdrelationtype['und'][0]['tid'] = current($term)->tid;
      	
      	node_save($child);
      	$js_data['append_to'] = 'inside';
      	break;
      	
      case 'voucher_product_specific':
      	$child->type = 'treenodeproductforvoucher';
      	$child->field_weight['und'][0]['value'] = $weight;
      	$child->field_ref_vouchercardtype['und'][0]['nid'] = $tmpProductNid[1];
      	$child->field_ref_product['und'][0]['nid'] = $childNid;
      	
      	node_save($child);
      	
      	_create_treenodecounterforvoucherprd($child, $childNid);
      	
      	$js_data['append_to'] = 'inside';
      	break;

      case 'mobile_nonusage_deposit':
      	
      	_remove_existing_children($tmpProductNid[1], $tmpParentNid[1]);
      	 
      	$child->type = 'treenodedepositscheme';
      	$child->field_weight['und'][0]['value'] = $weight;
      	$child->field_ref_product['und'][0]['nid'] = $tmpProductNid[1];
      	$child->field_ref_depositscheme['und'][0]['nid'] = $childNid;
      	 
      	node_save($child);
      	
      	$js_data['parent_title'] = $child->title;
      	$js_data['append_to'] = 'inside';
      	$js_data['replace_or_append'] = 'replace';
      	break;

      case 'mobile_nonusage_threshold':
      	
      	_remove_existing_children($tmpProductNid[1], $tmpParentNid[1]);
      	
      	$child->type = 'treenodethresholdscheme';
      	$child->field_weight['und'][0]['value'] = $weight;
      	$child->field_ref_product['und'][0]['nid'] = $tmpProductNid[1];
      	$child->field_ref_thresholdscheme['und'][0]['nid'] = $childNid;
      	
      	node_save($child);
      	
      	$js_data['parent_title'] = $child->title;
      	$js_data['append_to'] = 'inside';
      	$js_data['replace_or_append'] = 'replace';
      	break;
      	
      case 'mobile_nonusage_recharge_additional':
      	$child->type = 'treenodevouchercardforproduct';
      	$child->field_weight['und'][0]['value'] = $weight;
      	$child->field_ref_product['und'][0]['nid'] = $tmpProductNid[1];
      	$child->field_ref_vouchercardtype['und'][0]['nid'] = $childNid;
      	 
      	node_save($child);
      	
      	$js_data['append_to'] = 'inside';
      	break;
      	
      }
      $js_data['children'][] = get_children_stored_procedure($child->nid,$parentNid);
  }

  $js_settings = array(
  	'success' => TRUE,
	'data' => $js_data
  );
  
// dsm($js_settings, 'js_settings');
  
  drupal_add_js(array('product_catalog_ajax_result' => $js_settings), 'setting');
  
  $renderOutput = '';
  $output[] = $renderOutput;
  $output = ajax_render($output);
  
  print $output;
  exit;
}

function _remove_existing_children($root_nid, $refTreeTid) {
	$nodes = get_1st_children_nids_by_in_tree($root_nid, $refTreeTid);
	node_delete_multiple($nodes);
	
}

function _create_treenodecounterforvoucherprd($treenodeproductforvoucher, $productNid){
	global $user;
	
	$params = array('0' => $productNid);
	$view = views_get_view('list_treenodecounter');
	$view->set_display('panel_pane_4');
	$view->set_arguments($params);
	$view->execute();
	
	foreach($view->result as $record) {
		
		$treenodecounterforvoucherprd = new StdClass();
		$treenodecounterforvoucherprd->type = 'treenodecounterforvoucherprd';
		$treenodecounterforvoucherprd->uid = $user->uid;
		$treenodecounterforvoucherprd->language = 'und';
		$treenodecounterforvoucherprd->field_ref_treenodecounter['und'][0]['nid'] = $record->nid;
		$treenodecounterforvoucherprd->field_ref_treenodeproductforvouc['und'][0]['nid'] = $treenodeproductforvoucher->nid;
		node_save($treenodecounterforvoucherprd);
	}
	
}

// [arg], [Exclude]일 경우, 해당 collection name에 해당하는 qtab configration을 읽어서 replace arg를 위한 result값을 보내준다.
// 
function _get_view_result_qtabConfgNid($collectionName, $args) {

	$resultArr = array();
	$qtabConfigs = _qtabconfig_loading($collectionName, $args['termInTree']);
	
	if(isset($args['qtabIndex'])) {
		$qtabConfig = $qtabConfigs[$collectionName][$args['qtabIndex']];
	} else {
		$qtabConfig = $qtabConfigs[$collectionName][0];
	}
	
	$tmpView = views_get_view($qtabConfig['content']);
	
	$view = views_get_view($qtabConfig['content']);
	$view->set_display($qtabConfig['display']);
	
	if(isset($qtabConfig['args'])) {
		$newArgs = _replace_arguments($qtabConfig['args'], $qtabConfig, $args);
	}
	$tempArgs = explode('/', $newArgs);
	
	foreach($tempArgs as $tmpArg){
		$arguments[] = $tmpArg;
	}
	
	$view->set_arguments($arguments);
	$view->execute();
	$results = $view->result;
	
	foreach($results as $record) {
		$resultArr[] = view_get_field_value_by_label($view, 'qtabConfigNid', $record);
	}
	
	return $resultArr;
}

// 	$args = array(
// 			'qtabIndex' => $qtabIndex,
// 			'termInTree' => $termInTree,
// 			'id' => $id,
// 			'rootId' => $rootId
// 	);
function _replace_arguments($origArgs, $qtabConfig, $args) {

	$newArgString = $origArgs;
	$qtabConfigArgList = explode('/', $origArgs);
	$reservedArgList = array('$productNid', '$tariffplanNid','$voucherCardTypeNid','$nid', '$numberSpecialNid','[arg]', '[Exclude]', '[Include]', '$refTreeTid');

	$matchedArgList = array_intersect($qtabConfigArgList, $reservedArgList);
	
	foreach($matchedArgList as $matchedArg) {
		switch($matchedArg) {
			case '$productNid':
			case '$tariffplanNid' :
			case '$voucherCardTypeNid' :
				$newArgString = str_replace($matchedArg, $args['rootId'], $newArgString);
				break;
			case '$nid':
			case '$refTreeTid':
				$newArgString = str_replace($matchedArg, $args['id'], $newArgString);
				break;			
			case '[arg]':
				$collectionName = 'field_qtabs_click_arguments';
				$result = _get_view_result_qtabConfgNid($collectionName, $args);
				
				if(!empty($result)) {
					$newArgString = str_replace($matchedArg, join(',', $result), $newArgString);
				} else {
					$newArgString = str_replace('/'.$matchedArg, '', $newArgString);
				}
				break;
				
			case '[Exclude]':
				$collectionName = 'field_qtabs_right_click_exclude';
				$result = _get_view_result_qtabConfgNid($collectionName, $args);
				
				if(!empty($result)) {
					$newArgString = str_replace($matchedArg, join(',', $result), $newArgString);
				} else {
					$newArgString = str_replace('/'.$matchedArg, '', $newArgString);
				}
				break;
				
			case '[Include]':
				$collectionName = 'field_qtabs_right_click_include';
				$result = _get_view_result_qtabConfgNid($collectionName, $args);
				
			
				if(!empty($result)) {
					$newArgString = str_replace($matchedArg, join(',', $result), $newArgString);
				} else {
					$newArgString = str_replace('/'.$matchedArg, '', $newArgString);
				}
				break;
			case '$numberSpecialNid':
				$newArgString = str_replace($matchedArg, $args['rootId'], $newArgString);
				break;
			default:
				break;
		}
	}
	return $newArgString;
}

function _qtabconfig_loading($collectionName, $termInTree) {
	$qtabConfigs = array();
	
	$tempCmd = '$loadingInfos = $termInTree->'.$collectionName."['und'];";
	eval($tempCmd);
	
	foreach($loadingInfos as $loadingInfo) {
		
		$collectionItem = field_collection_item_load($loadingInfo['value']);

		$qtabConfig = array(
			'title' => !empty($collectionItem->field_tab_title)? $collectionItem->field_tab_title['und'][0]['safe_value']: '',
			'type' => !empty($collectionItem->field_tab_type)? $collectionItem->field_tab_type['und'][0]['value']: '',
			'content' => !empty($collectionItem->field_tab_content)? $collectionItem->field_tab_content['und'][0]['safe_value']: '',
			'display' => !empty($collectionItem->field_view_display)? $collectionItem->field_view_display['und'][0]['safe_value']: '',
			'args'	=> !empty($collectionItem->field_view_arguments)? $collectionItem->field_view_arguments['und'][0]['safe_value']: ''  
		);
		$qtabConfigs[$collectionName][] = $qtabConfig;
	}
	return $qtabConfigs;
}

function product_catalog_ajax_load_select_form($nid,$eventType,$rootNid,$relType,$defaultTabIndex){
	
	$rootId = explode('_',$rootNid);
	$rootId = $rootId[1];
	$rootNode = node_load($rootId);
	
	$id = explode('_',$nid);
	$nodeOrTerm = $id[0];
	// term 일 경우에만 id 가 term_111_222 형태로 넘어온다. node 일 경우는 node_111 형태임
	// 따라, term 일 경우에만 rootid 를 가장 가까운 상위의 node instance 의 nid로 setting
	if(isset($id[2])){
		$rootId = $id[2];
	}
	//id 를 prefix 제거하고 setting
	$id = $id[1];

	switch($eventType){
		case 'click':
			$targetCollection = 'field_qtabs_click';
			break;
		case 'right_click':
			$targetCollection = 'field_qtabs_right_click';
			break;
	}
	
	switch($nodeOrTerm) {
		case 'node':
			$termInTree = taxonomy_get_term_by_name($relType, 'tpl_node_qtab_info');
			$termInTree = current($termInTree);
			break;
		case 'term':
			$termInTree = taxonomy_term_load($id);
			break;
	}
	
// dsm($termInTree, 'termInTree');
	$qtabConfigs = _qtabconfig_loading($targetCollection, $termInTree);
	
	$qtabs = array();
    $weight = 0;
    
    $index = 0;
	$qtabIndex = 0;
	
    foreach($qtabConfigs[$targetCollection] as $qtabConfig) {

		if(isset($qtabConfig['args'])) {
			$args = array(
					'qtabIndex' => $qtabIndex,
					'termInTree' => $termInTree,
					'id' => $id,
					'rootId' => $rootId
			);
			$newArgs = _replace_arguments($qtabConfig['args'],  $qtabConfig, $args);
			
		}else {
			$newArgs = array();
		}
		
		switch($qtabConfig['type']) {
            case 'node':
            	break;
            	
            case 'block':
            	break;
            	
            case 'view':
				
            	$qtabs[] = array(
                    'title' => $qtabConfig['title'],
                    'type' => 'view',
                    'vid' => $qtabConfig['content'],
                    'display' => $qtabConfig['display'],
                	'args' => $newArgs,
                	'weight' => $weight
                );
            	break;
            	
            case 'callback':
            	$args = array(
            			'qtabIndex' => $qtabIndex,
            			'termInTree' => $termInTree,
            			'id' => $id,
            			'rootId' => $rootId
            	);
            	$newArgs = _replace_arguments($qtabConfig['content'], $qtabConfig, $args);
				
            	$qtabs[] = array(
            		'title' => $qtabConfig['title'],
            		'type' => 'callback',
            		'path' => $newArgs,
            		'weight' => $weight
            	);
				break;
        }
        $weight = $weight + 1;
        $qtabIndex = $qtabIndex + 1;
    }
	
    $qtoptions = array(
    	'ajax' => FALSE,
    	'style' => 'zen',
    	//'renderer' => 'ui_tabs'
    );
	
	if(isset($defaultTabIndex)) {
		$qtoptions['default_tab'] = $defaultTabIndex;
    }
	
    $quicktabs = quicktabs_build_quicktabs('qtab_dummy',$qtoptions,$qtabs);
    $qtRender =  drupal_render($quicktabs['content']);

    $renderOutput = '<div id="tree_content_div" style="overflow:scroll;height:700px;">'.$qtRender.'</div>';
    $output[] = $renderOutput;
    $output = ajax_render($output);
    
// dsm($output,'output');
    
    print $output;
    exit;
}

function product_catalog_ajax_move_node($js = NULL ) {

    $nodes = $_POST['nodes'];
    $parent = $_POST['parent'];

    foreach($nodes as $node) {
    	$tempArr = explode('_', $node['nid']);
    	$nid = $tempArr[1];    	
    	$temp_node = node_load($nid);    	
    	$temp_node->field_weight['und'][0]['value'] = $node['weight'];
        node_save($temp_node);       
    }

    if($parent['changed'] == 'true') {    	
        $temp_node = node_load($nodes[0]['nid']);
        $temp_node->field_parent_node['und'][0]['nid'] = $parent['nid'];
        node_save($temp_node);
    }

    print json_encode("{'return' : true}");    
    exit;
}

function product_catalog_ajax_load_tree($js = NULL, $rootNid) {

    //dsm(date('H:i:s'));
    //$children = get_children($rootNid);
    $rootNode = node_load($rootNid);
    switch($rootNode->type){
		case 'simpleproductoffering':
		case 'vouchercardtype':
		case 'number_special':
		   	$children = _load_tree_item_mixed_with_node_and_term($rootNode);	    	
	    break;
		default:
	    	$children = get_children_stored_procedure($rootNid);
	    break;
	}
    //dsm($children,'children'); 
    print json_encode($children); 
    //dsm(date('H:i:s'));    
    exit;
}


function product_catalog_ajax_add_content($js = NULL) {
	global $user;
	ctools_include('node.pages', 'node', '');
	ctools_include('ajax');

	$rootId = $_POST['root_id'];
	$rootNid = explode('_',$rootId);
	$rootNid = $rootNid[1];
	$parentId = $_POST['parent_id'];
	$parentNid = explode('_',$parentId);
	$refTreeNid = isset($parentNid[2])?$parentNid[2]:NULL;
	$parentType = $parentNid[0];
	$parentNid = $parentNid[1];
	$childContentType = $_POST['child_content_type'];
	$maxWeight = $_POST['max_weight'];
	$serviceType = $_POST['service_type'];
	
	$weightStep = 100;
	$weight = $maxWeight + $weightStep;

	switch ($childContentType){
        case 'conditionwhatservicetypefactors':        	 
			$child = new StdClass();
    		$child->uid = $user->uid;
    		$child->type = $childContentType;
    		$child->language = 'und';
    		$child->field_parent_node = array('und' => array(0 => array('nid' => $parentNid)));
    		$child->field_weight = array('und' => array(0 => array('value' => $weight)));

            $serviceTypeTerm = taxonomy_get_term_by_name($serviceType, 'service_type');
            $child->field_ref_service_type = array('und' => array(0 => array('tid' => current($serviceTypeTerm)->tid)));
            
            node_save($child);

            // js tree node add function call
    		$output = array('parent_id' => $parentId, 'child_id' => 'node_'.$child->nid,'title' => $child->title, 'node_type' => $child->type, 'weight' => $weight);
    		print json_encode($output);
    		exit;    		
            break;
            
    	case 'conditioncommonor':
    	case 'conditioncommonand':
        case 'conditionwhatincomingcall':
		case 'conditionwhenfirstmonth':
		case 'conditionwhencustomerbirthday':
		case 'conditionwhencompanybirthday':
    		// create without popup
    		$child = new StdClass();
    		$child->uid = $user->uid;
    		$child->type = $childContentType;
    		$child->language = 'und';
    		$child->field_parent_node = array('und' => array(0 => array('nid' => $parentNid)));
    		$child->field_weight = array('und' => array(0 => array('value' => $weight)));
    		node_save($child);

    		// js tree node add function call
    		$output = array('parent_id' => $parentId, 'child_id' => 'node_'.$child->nid,'title' => $child->title, 'node_type' => $child->type, 'weight' => $weight);
    		print json_encode($output);
    		exit;
    		break;
			
		default:    		
    		if($refTreeNid == NULL) $refTreeNid = $parentNid;
    		$qtabs = array();
    		
    		$path = 'tree/create/'.$childContentType.'/'.$parentType.'/'.$parentNid.'/'.$weight.'/'.$rootNid.'/'.$refTreeNid;
    		
    		$qtabs[] = array(
    				'title' => 'Add',
    				'type' => 'callback',
    				'path' => $path,
    				'weight' => 0
    		);
    		$qtoptions = array(
    				'ajax' => FALSE,
    				'style' => 'zen',
    		);
    		
    		$quicktabs = quicktabs_build_quicktabs('qtab_dummy',$qtoptions,$qtabs);
    		$qtRender =  drupal_render($quicktabs['content']);
    		
			$renderOutput = '<div id="tree_content_div" style="overflow:scroll;height:700px;">'.$qtRender.'</div>';
			$output[] = $renderOutput;
			$output = ajax_render($output);
			print $output;
		    exit; 
    		break;
    }    
}

function product_catalog_ajax_delete_from_tree($js = NULL){
	ctools_include('node.pages', 'node', '');
	ctools_include('ajax');
	
	$deleteNodes = $_POST['nodes'];
	
	$deleteNids = array();
	foreach($deleteNodes as $delItem){
		$delItem = explode('_',$delItem);
		if($delItem[0] == 'node'){
			$deleteNids[] = $delItem[1];
		}
	}
	
	node_delete_multiple($deleteNids);
	
	$output = array('return' => true);

	print json_encode($output);
	exit;
}

function product_catalog_ajax_edit_content($js = NULL, $contentType, $nodeNid) {
	module_load_include('inc','node','node.pages');
	$nodeNid = explode('_',$nodeNid);
	$nodeNid = $nodeNid[1];
	
    $qtabs = array();
    $path = 'tree/edit/'.$nodeNid;
    
    $qtabs[] = array(
    		'title' => 'Edit',
    		'type' => 'callback',
    		'path' => $path,
    		'weight' => 0
    );
    $qtoptions = array(
    		'ajax' => FALSE,
    		'style' => 'zen',
    );
    
    $quicktabs = quicktabs_build_quicktabs('qtab_dummy',$qtoptions,$qtabs);
    $qtRender =  drupal_render($quicktabs['content']);
    
    $renderOutput = '<div id="tree_content_div" style="overflow:scroll;height:700px;">'.$qtRender.'</div>';
    $output[] = $renderOutput;
	$output = ajax_render($output);
	print $output;
    exit;    
}

function product_catalog_modal_form_view($formName,$param1=NULL){
	ctools_include('node.pages', 'node', '');
	ctools_include('modal');
	ctools_include('ajax');
	
	$param = array();
	switch($formName){
		case 'timetable_selectable_form':
			$param['timetable_nid'] = $param1;
			$param['editable'] = FALSE;
			break;
		case 'numberingplan_domestic_view_form':
		case 'numberingplan_idd_view_form':
			$param['plan_nid'] = $param1;
			break;
		case 'depositscheme_view_form':
			$param['depositscheme_nid'] = $param1;
			break;
		case 'thresholdscheme_view_form':
			$param['thresholdscheme_nid'] = $param1;
			break;
	}
		
	$form_state = array(
		'ajax' => TRUE,
		'param' => $param
	);
	
	$output = ctools_modal_form_wrapper($formName, $form_state);
	
	switch($formName){
		case 'timetable_selectable_form':
			$output[] = ajax_command_invoke(NULL, 'disableSelectable');
			break;
	}
	
	print ajax_render($output);
	exit;
}

function product_catalog_modal_form_edit_modal_content($js = NULL, $contentType, $nodeNid, $refNodeNid = NULL, $refTreeTid = NULL) {
    ctools_include('node.pages', 'node', '');
    ctools_include('modal');
    ctools_include('ajax');
	
	dsm($contentType, 'contentType');
	dsm($nodeNid, '$nodeNid');
	dsm($refNodeNid, '$refNodeNid');
	dsm($refTreeTid, '$refTreeTid');
	
    $node = node_load($nodeNid);

    if (!$js) {
        return drupal_get_form($contentType . '_node_form', $node);
    }

    $form_state = array(
        'ajax' => TRUE,
    );

    $form_state['build_info']['args'] = array($node);

    $output = ctools_modal_form_wrapper($contentType . '_node_form', $form_state);

    if (!empty($form_state['executed'])) {
        $output = array();
        $output[] = ctools_modal_command_dismiss();
		
        switch($node->type){
        	case 'rate':
        		$refNodeNid = $node->field_ref_tariffplan['und'][0]['nid'];
        		$refTreeTid = $node->field_ref_tree_tid['und'][0]['value'];
        		$output[] = _add_command_after_dismiss_modal($refNodeNid,$refTreeTid);
        		break;
        	case 'loyaltypointfactors':
        		
        		$output[] = _add_command_after_dismiss_modal($refNodeNid,$refTreeTid);
        		break;
        	case 'numberspecialfactors':
				$orirefNodeNid = $refNodeNid;
				$refNodeNid = $node->nid;
        		$refTreeTid = $orirefNodeNid;
        		$output[] = _add_command_after_dismiss_modal($refNodeNid,$refTreeTid);
        	//	$output[] = ctools_ajax_command_reload();
				break;	
        	case 'domestic_ratinggroup':
        	case 'idd_ratinggroup':
        	case 'depositschemefactors':
        	case 'depositschemeadjustment':
        	case 'thresholdschemefactors':
			
        	case 'area_code':
        		$output[] = ctools_ajax_command_reload();
				break;
			case 'actionsetcounter':
			case 'actionsetcounteronbonus':
				$defaultTabIndex = $refTreeTid;
				$output[] = _add_command_after_dismiss_modal($refNodeNid,$refTreeTid,$defaultTabIndex);
				break;
        }
        
    }else{
    	if($contentType == 'rate'){
    		$output[] = ajax_command_invoke(NULL, 'drawFlotLinkInit');
    	}
    }
//dsm($output,'modal output');
    print ajax_render($output);
    exit;
}

function product_catalog_ajax_delete_from_view($nodeNid, $refNodeNid, $defaultTabIndex){
	ctools_include('node.pages', 'node', '');
	ctools_include('ajax');
		
	$node = node_load($nodeNid);
	$output = array();

	switch($node->type){
		case 'rate':
		case 'numberspecialfactors';
		//	$refNodeNid = $node->field_ref_tariffplan['und'][0]['nid'];
		//	$refTreeTid = $node->field_ref_tree_tid['und'][0]['value'];
		//	dsm('_add_command_after_dismiss_modal--------------------------------');
		//	$output[] = ajax_command_invoke(NULL, 'reloadTreeContentDivFromDrupal', array($nodeId));
		//	$output[] = _add_command_after_dismiss_modal($refNodeNid,$refTreeTid);
		//dsm('ctools_ajax_command_reload--------------------------------');
			$output[] = ctools_ajax_command_reload();
			break;
		case 'domestic_ratinggroup':
		case 'idd_ratinggroup':
		case 'depositschemefactors':
		case 'depositschemeadjustment':
		case 'thresholdschemefactors':
		case 'area_code':
			$output[] = ctools_ajax_command_reload();
			break;
		case 'actionsetcounter':
		case 'actionsetcounteronbonus':
			$output[] = _add_command_after_dismiss_modal($refNodeNid,NULL,$defaultTabIndex);
			break;
	}
	
	node_delete($nodeNid);		
	print ajax_render($output);
	//print json_encode($output);
	exit;
}
?>
