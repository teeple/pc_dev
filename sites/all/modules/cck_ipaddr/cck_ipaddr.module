<?php

/**
 * @file
 * Provides an IP address and range widget to CCK and provides validation for IP addresses.
 */

/* Fields */

/**
 * Implementation of hook_field_info().
 * 
 * @return
 *   An array keyed by field type name. Each element of the array is an associative
 *   array with these keys and values:
 *   - "label": The human-readable label for the field type.
 */
function cck_ipaddr_field_info() {
  return array(
    'cck_ipaddr' => array(
      'label' => 'IP Address',
      'description' => t('Provide an field to handle IP addresses'),
    ),
  );
}

/**
 * Implementation of hook_field_settings().
 * 
 * @param $op
 *   The operation to be performed.
 * @param $field
 *   The field on which the operation is to be performed.
 * @return
 *   This varies depending on the operation.
 *   - "form": an array of form elements to add to
 *     the settings page.
 *   - "validate": no return value. Use form_set_error().
 *   - "save": an array of names of form elements to
 *     be saved in the database.
 *   - "database columns": an array keyed by column name, with arrays of column 
 *     information as values.
 *   - "filters": an array whose values are 'filters'
 *     definitions as expected by views.module (see Views Documentation).
 *   - "callbacks": an array describing the field's behaviour regarding hook_field 
 *     operations. The array is keyed by hook_field operations ('view', 'validate'...)
 *     and has the following possible values : 
 *       CONTENT_CALLBACK_NONE     : do nothing for this operation 
 *       CONTENT_CALLBACK_CUSTOM   : use the behaviour in hook_field(operation)
 *       CONTENT_CALLBACK_DEFAULT  : use content.module's default bahaviour
 *     Note : currently only the 'view' operation implements this feature. 
 *     All other field operation implemented by the module _will_ be executed 
 *     no matter what.
 */
function cck_ipaddr_field_settings($op, $field) {
  switch ($op) {
    case 'form':
      $form = array();
      $form['private'] = array(
        '#type' => 'checkbox',
        '#title' => t('Reject non-routable IP addresses'),
        '#default_value' => $field['private'] ? $field['private'] : 0,
        '#required' => FALSE,
        '#description' => t('Should the form throw an error if the user inputs a non-routable IP address such as 127.0.0.1 or 10.0.0.1?'),
      );
      if ($field['widget']['type'] == 'ipaddr_range') {
        $form['cidr'] = array(
          '#type' => 'textfield',
          '#title' => t('Restrict size of IP range'),
          '#default_value' => $field['cidr'] ? $field['cidr'] : '',
          '#required' => FALSE,
          '#size' => 2,
          '#maxlength' => 2,
          '#description' => t('Enter a CIDR prefix length. For example, a netmask of 255.255.255.0 is equivalent to a CIDR prefix of 24. ') . l('http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing', 'http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing'),
        );
      }
      return $form;
    case 'save':
      return array('private', 'cidr');
    case 'database columns':
      $columns = array();
      $field = array(
        'type' => 'varchar', 
        'length' => 3,
        'sortable' => FALSE,
      );
      for ($i = 1; $i <= 2; $i++) {
        for ($j = 1; $j <= 4; $j++) {
          $columns['addr' . $i . '_q' . $j] = $field;
        }
      }
      $columns['label'] = array('type' => 'varchar', 'length' => 255, 
        'not null' => TRUE, 'default' => '', 'sortable' => FALSE);
      return $columns;
    case 'validate':
      if (! empty($field['cidr'])) {
        if (!is_numeric($field['cidr'])
            || intval($field['cidr']) != $field['cidr'] || $field['cidr'] < 0 
            || $field['cidr'] > 32) {
          form_set_error('cidr', t('Invalid CIDR prefix'));
        }
      }
      break;
    case 'callbacks':
      return array(
        'view' => CONTENT_CALLBACK_CUSTOM,
      );
      break;
  }
}

/**
 * Implementation of hook_content_is_empty
 * @param type $item
 * @param type $field
 * @return type 
 */
function cck_ipaddr_content_is_empty($item, $field) {
  $empty = TRUE;
  foreach ($item as $quad) {
    if (! empty($quad) || $quad === 0) {
      $empty = FALSE;
    }
  }
  return $empty;
}

/**
 * Implementation of hook_field().
 * 
 * Validate the user's input. At present, only English alphabetic characters
 * are valid. Would like to add support for other languages.
 * Or present the data for viewing.
 * @param $op
 *   What kind of action is being performed.
 * @param &$node
 *   The node the action is being performed on.
 * @param $field
 *   The field the action is being performed on.
 * @param &$node_field
 *   The contents of the field in this node. Changes to this variable will
 *   be saved back to the node object.
 * @return
 *   This varies depending on the operation.
 *   - The "load" operation should return an object containing extra values
 *     to be merged into the node object.
 *   - The "view" operation should return a string containing an HTML
 *     representation of the field data.
 *   - The "insert", "update", "delete", "validate", and "submit" operations
 *     have no return value.
 */
function cck_ipaddr_field($op, &$node, $field, &$items, $teaser, $page) {
  switch ($op) {
    case 'sanitize':
      if (is_array($items)) {
        foreach ($items as $delta => $item) {
          for ($i = 1; $i <= 2; $i++) {
            for ($j = 1; $j <=4; $j++) {
              $quad = 'addr' . $i . '_q' . $j;
              if (! empty($items[$delta][$quad]) 
                  || $items[$delta][$quad] === 0) {
                $items[$delta][$quad] = sprintf('%03d', $item[$quad]);
              }
            }
          }
        }
      }
      break;
  }
}

/**
 * Declare information about a formatter.
 *
 * @return
 *   An array keyed by formatter name. Each element of the array is an associative
 *   array with these keys and values:
 *   - "label": The human-readable label for the formatter.
 *   - "field types": An array of field type names that can be displayed using
 *     this formatter.
 */
function cck_ipaddr_field_formatter_info() {
  return array(
    'default' => array(
      'label' => 'IP address',
      'field types' => array('cck_ipaddr'),
    ),
  );
}

/* Widgets */

/**
 * Implementation of hook_widget_info().
 * 
 * @return
 *   An array keyed by widget name. Each element of the array is an associative
 *   array with these keys and values:
 *   - "label": The human-readable label for the widget.
 *   - "field types": An array of field type names that can be edited using
 *     this widget.
 */
function cck_ipaddr_widget_info() {
  return array(
    'ipaddr' => array(
      'label' => 'IP Address',
      'field types' => array('cck_ipaddr'),
    ),
    'ipaddr_range' => array(
      'label' => 'IP Address Range',
      'field types' => array('cck_ipaddr'),
    ),
  );
}

/**
 * Implementation of hook_widget().
 *
 * Attach a single form element to the form. It will be built out and
 * validated in the callback(s) listed in hook_elements. We build it
 * out in the callbacks rather than here in hook_widget so it can be
 * plugged into any module that can provide it with valid
 * $field information.
 *
 * Content module will set the weight, field name and delta values
 * for each form element. This is a change from earlier CCK versions
 * where the widget managed its own multiple values.
 *
 * If there are multiple values for this field, the content module will
 * call this function as many times as needed.
 *
 * @param $form
 *   the entire form array, $form['#node'] holds node information
 * @param $form_state
 *   the form_state, $form_state['values'] holds the form values.
 * @param $field
 *   the field array
 * @param $delta
 *   the order of this item in the array of subelements (0, 1, 2, etc)
 *
 * @return
 *   the form item for a single element for this field
 */
function cck_ipaddr_widget(&$form, &$form_state, $field, $items, $delta = 0) {
  $element = array(
    '#type' => $field['widget']['type'],
    '#default_value' => isset($items[$delta]) ? $items[$delta] : NULL,
  );
  return $element;
}

/**
 * Implement hook_elements();
 * @return array
 */
function cck_ipaddr_elements() {
  drupal_add_css(drupal_get_path('module', 'cck_ipaddr'). '/cck_ipaddr.css');
  $elements = array(
    'ipaddr' => array(
      '#input' => TRUE,
      '#process' => array('cck_ipaddr_widget_process')
    ),
    'ipaddr_range' => array(
      '#input' => TRUE,
      '#process' => array('cck_ipaddr_widget_process')
    ),
  );
  return $elements;
}

function cck_ipaddr_widget_process($element, $edit, &$form_state, $form) {
  $defaults = array();
  if (! empty($element['#value'])) {
    $defaults = $element['#value'];
  }
  $title = _cck_ipaddr_get_field_title($element);
  $element['#title'] = $title;

  $element += _cck_ipaddr_form_quartet(1, $title, $element['#required'], $defaults);
  if ($element['#type'] == 'ipaddr_range') {
    $element += _cck_ipaddr_form_quartet(2, $title, $element['#required'], $defaults);
  }
  else {
    $element += _cck_ipaddr_hidden_quartet(2);
  }
  $element['label'] = array(
    '#type' => 'textfield',
    '#default_value' => ! empty($defaults['label']) ? $defaults['label'] : '',
    '#required' => $element['#required'],
    '#size' => 24,
    '#maxlength' => 255,
    '#field_prefix' => 'Label: ',
  );
  
  // attach validators
  $element['#element_validate'][] = '_cck_ipaddr_quad_validate';
  if ($form['#field_info'][$element['#field_name']]['private'] == 1) {
    $element['#element_validate'][] = '_cck_ipaddr_private_validate';
  }
  if ($element['#type'] == 'ipaddr_range'
      || ! empty($form['#field_info'][$element['#field_name']]['cidr'])) {
    $element['#cidr'] = $form['#field_info'][$element['#field_name']]['cidr'];
    $element['#element_validate'][] = '_cck_ipaddr_cidr_validate';
  }
  return $element;
}

/* Themes */

/**
 * Implement hook_theme() for the field formatter
 * @return type 
 */
function cck_ipaddr_theme() {
  return array(
    'cck_ipaddr_formatter_default' => array(
      'arguments' => array('element' => NULL),
    ),
    'ipaddr' => array(
      'arguments' => array('element' => NULL),
    ),
    'ipaddr_range' => array(
      'arguments' => array('element' => NULL),
    ),
  );
}

/**
* Prepare an individual item for viewing in a browser.
*
* @param $field
*   The field the action is being performed on.
* @param $item
*   An array, keyed by column, of the data stored for this item in this field.
* @param $formatter
*   The name of the formatter being used to display the field.
* @param $node
*   The node object, for context. Will be NULL in some cases.
*   Warning : when displaying field retrieved by Views, $node will not
*   be a "full-fledged" node object, but an object containg the data returned
*   by the Views query (at least nid, vid, changed)
* @return
*   An HTML string containing the formatted item.
*
* In a multiple-value field scenario, this function will be called once per
* value currently stored in the field. This function is also used as the handler
* for viewing a field in a views.module tabular listing.
*
* It is important that this function at the minimum perform security
* transformations such as running check_plain() or check_markup().
*/
function theme_cck_ipaddr_formatter_default($item = NULL) {
  $ip_addr = $item['#item'];
  unset($ip_addr['#delta']);

  if (cck_ipaddr_content_is_empty($ip_addr, NULL)) {
    return;
  }
  
  
  $output = '';
  
  if ($ip_addr['label']) {
    $output .= strip_tags($ip_addr['label']) . ': ';
  }
  for ($i = 1; $i <= 4; $i++) {
    $output .= strip_tags($ip_addr['addr1_q' . $i]);
    if ($i != 4) {
      $output .= '.';
    }
  }
  if (! empty($ip_addr['addr2_q1'])) {
    $output .= ' - ';
    for ($i = 1; $i <= 4; $i++) {
      $output .= strip_tags($ip_addr['addr2_q' . $i]);
      if ($i != 4) {
        $output .= '.';
      }
    }
  }
  return $output;
}

function theme_ipaddr($element) {
  $output = '<div class="ip-addr-item">';
  $output .= $element['#children'];
  $output .= "</div>\n";
  return $output;
}

function theme_ipaddr_range($element) {
  $output = '<div class="ip-addr-item">';
  $output .= $element['#children'];
  $output .= "</div>\n";
  return $output;
}

/* Helpers */

/**
 * Create a quartet of fields for an ip address form
 * @param type $addr_index
 * @param type $title
 * @param type $required
 * @param type $data
 * @return type 
 */
function _cck_ipaddr_form_quartet($addr_index, $title, $required, $data = NULL) {
  $quartet = array();
  for ($i = 1; $i <= 4; $i++) {
    $key = 'addr' . $addr_index . '_q' . $i;
    $quartet[$key] = array(
      '#type' => 'textfield',
      '#required' => $required,
      '#size' => 3,
      '#maxlength' => 3,
      '#default_value' => ! empty($data[$key]) ? $data[$key] : '',
    );
    if ($i == 1) {
      if ($addr_index == 1) {
        $quartet[$key]['#title'] = $title;
      }
      else {
        $quartet[$key]['#prefix'] = ' - ';
      }
    }
    if ($i != 4) {
      $quartet[$key]['#suffix'] = '.';
    }
  }
  return $quartet;
}

/**
 * Create a quartet of hidden fields for an ip address form
 * @param type $addr_index
 * @return type 
 */
function _cck_ipaddr_hidden_quartet($addr_index) {
  $quartet = array();
  for ($i = 1; $i <= 4; $i++) {
    $key = 'addr' . $addr_index . '_q' . $i;
    $quartet[$key] = array(
      '#type' => 'value',
      '#value' => '',
      '#required' => FALSE,
    );
  }
  return $quartet;
}

/**
 * Set the title of a field based on delta and widget type
 * @param type $type
 * @param type $delta
 * @return type 
 */
function _cck_ipaddr_get_field_title($element) {
  if ($element['#type'] == 'ipaddr_range') {
    $title = t('IP range');
  }
  else {
    $title = t('IP address');
  }
  //TODO: check for multiple values
  if ($element['#delta'] !== NULL) {
    $title .= ' ' . $element['#delta'];
  }
  return $title;
}

/**
 * Validate that each quad is between 0 and 255
 * @param type $element
 * @param type $form_state 
 */
function _cck_ipaddr_quad_validate (&$element, &$form_state) {
  if (_cck_ipaddr_element_is_empty($element)) {
    return;
  }
  
  for ($i = 1; $i <= 4; $i++) {
    $key = 'addr1_q' . $i;
    if (!preg_match('/^\d+$/', $element[$key]['#value']) 
          || ($element[$key]['#value'] < 0) 
          || ($element[$key]['#value'] > 255)) {
      form_set_error(implode('][', $element['#parents']) . '][' . $key, t('Illegal value for quad %quad in %title. Each quad must be an integer between 0 and 255. ', 
        array(
          '%quad' => $i,
          '%title' => t($element['#title']), 
        )));
    }
  }
  if ($element['#type'] == 'ipaddr_range') {
    for ($i = 1; $i <= 4; $i++) {
      $key = 'addr2_q' . $i;
      if (!preg_match('/^\d+$/', $element[$key]['#value']) 
            || ($element[$key]['#value'] < 0) 
            || ($element[$key]['#value'] > 255)) {
        form_set_error(implode('][', $element['#parents']) . '][' . $key, t('Illegal value for quad %quad in %title. Each quad must be an integer between 0 and 255. ', 
          array(
            '%quad' => $i + 4,
            '%title' => t($element['#title']), 
          )));
      }
    }
  }
}

/**
 * Validate an ip address to make sure there are no non-routable ip addresses
 * see http://www.faqs.org/qa/rfcc-618.html
 * i'm not implementing the entire bogon list.
 * @param type $element 
 */
function _cck_ipaddr_private_validate($element, $form_state) {
  if (_cck_ipaddr_element_is_empty($element)) {
    return;
  }

  $class_a = array(0, 10, 127, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247);
  $class_b = array(16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31);

  if ($element['addr1_q1']['#value'] != '' 
      && (in_array($element['addr1_q1']['#value'], $class_a) 
        || ($element['addr1_q1']['#value'] == 169 && $item['addr1_q2']['#value'] == 254) 
        || ($element['addr1_q1']['#value'] == 172 
            && in_array($element['addr1_q2']['#value'], $class_b)) 
        || ($element['addr1_q1']['#value'] == 192 && ($element['addr1_q2']['#value'] == 168 
            || ($element['addr1_q2']['#value'] == 0 && $element['addr1_q3']['#value'] == 2))) 
        || ($element['addr1_q1']['#value'] == 198 && $element['addr1_q2']['#value'] == 18))) {
    form_error($element,
        t('Illegal value for %name. Non-routable IP addresses are not allowed.',
            array(
              '%name' => t($element['#title']),
            )));
  }

  if ($element['#type'] == 'ipaddr_range') {
    if (in_array($element['addr2_q1']['#value'], $class_a) 
        || ($element['addr2_q1']['#value'] == 169 && $element['addr2_q2']['#value'] == 254) 
        || ($element['addr2_q1']['#value'] == 172 
          && in_array($element['addr2_q2']['#value'], $class_b)) 
        || ($element['addr2_q1']['#value'] == 192 && ($element['addr2_q2']['#value'] == 168 
          || ($element['addr2_q2']['#value'] == 0 && $element['addr2_q3']['#value'] == 2))) 
        || ($element['addr2_q1']['#value'] == 198 && $element['addr2_q2']['#value'] == 18)) {
      form_error($element,
          t('Illegal value for %name, second address. Non-routable IP addresses are not allowed.', 
              array(
                '%name' => t($element['#title']), 
              )));
    }
  }
}

function _cck_ipaddr_cidr_validate ($element, $form_state) {
  if (_cck_ipaddr_element_is_empty($element)) {
    return;
  }

  $bit1 = 
    sprintf('%08b', $element['addr1_q1']['#value']) .
    sprintf('%08b', $element['addr1_q2']['#value']) .
    sprintf('%08b', $element['addr1_q3']['#value']) .
    sprintf('%08b', $element['addr1_q4']['#value']);
  $bit2 = 
    sprintf('%08b', $element['addr2_q1']['#value']) .
    sprintf('%08b', $element['addr2_q2']['#value']) .
    sprintf('%08b', $element['addr2_q3']['#value']) .
    sprintf('%08b', $element['addr2_q4']['#value']);

  $prefix1 = substr($bit1, 0, $element['#cidr']);
  $prefix2 = substr($bit2, 0, $element['#cidr']);

  //php got confused comparing long strings with leading zeros, so i'm converting back to decimal for the comparison
  if (bindec($prefix1) != bindec($prefix2)) {
    form_error($element,
        t('Illegal address range for %name. Address range is limited to a 0.0.0.0/%cidr CIDR netmask.', 
            array(
              '%name' => t($element['#title']), 
              '%cidr' => $element['#cidr']
            )));
  }
}

/**
 * Test if an element is empty
 * @param type $element
 */
function _cck_ipaddr_element_is_empty($element) {
  $empty = TRUE;
  for ($i = 1; $i <= 2; $i++) {
    for ($j = 1; $j <= 4; $j++) {
      $key ='addr' . $i . '_q' . $j;
      if (! empty($element[$key]['#value']) || $element[$key]['#value'] === 0) {
        $empty = FALSE;
      }
    }
  }
  return $empty;
}