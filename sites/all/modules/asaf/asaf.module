<?php

function asaf_menu() {
  $items = array();

  $items['admin/config/system/asaf'] = array(
    'title' => 'Ajax submit for any form',
    'access arguments' => array('administer site configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('asaf_admin_settings_form'),
    'file' => 'asaf.admin.inc',
  );

  return $items;
}

function asaf_form_alter(&$form, &$form_state, $form_id) {
  $buttons = asaf_is_handled_form($form_id);

  if (variable_get('asaf_show_form_ids', 0)) {
    drupal_set_message(t('Form id: %form_id', array('%form_id' => $form_id)));
  }

  if (isset($buttons) && is_array($buttons)) {
    asaf_prepare_form($form, $form_state, $buttons);
  }
}

function asaf_batch_alter(&$batch) {
  if (_asaf_is_asaf()) {
    list($form, $form_state) = _asaf_get_form_details_from_stacktrace();
    if (isset($form_state['asaf']['form_path']) && $form_state['asaf']['form_path']) {
      $batch['source_url'] = $form_state['asaf']['form_path'];
    }

    if (isset($batch['form_state']['no_redirect'])) {
      $batch['form_state']['no_redirect'] = FALSE;
    }
  }
}

/*
 * For the asaf processed forms we should prevent sending Location header. Instead this we send json with standart ajax command "redirect"
 */
function asaf_drupal_goto_alter(&$path, &$options, &$http_response_code) {

  // Checking is asaf enabled
  if (_asaf_is_asaf()) {

    // Trying to find actual $form and $form_state from stacktrace
    // TODO: This code a little bit smells, and should be refactored (if it's possible)
    list($form, $form_state) = _asaf_get_form_details_from_stacktrace();

    if (is_array($form) && is_array($form_state)) {
      $form_state['redirect'] = array($path, $options);

      $page_callback_result = asaf_form_ajax_callback($form, $form_state);

      // Emulate correct response
      $router_item = menu_get_item(request_path());
      $default_delivery_callback = (isset($router_item) && $router_item) ? $router_item['delivery_callback'] : NULL;
      drupal_deliver_page($page_callback_result, $default_delivery_callback);

      exit;
    }
  }
}

/**
 * Attach ajax handlers to the specified buttons
 *
 * @param $form
 *   An associative array containing the structure of the form.
 * @param $form_state
 *   A keyed array containing the current state of the form. Asaf processed flag
 *   asaf options will save in $form_state.
 * @param $buttons
 *   (optional) Array containing information about buttons, which should be handled. Empty array
 *   means all buttons should be handled. Not empty associative array can have the following keys:
 *   - included: list of buttons which should be handled;
 *     @code
 *       $buttons = array(
 *         'included' => array(
 *           'actions][submit' => array(...),
 *           'actions][preview' => '',
 *         );
 *       );
 *     @endcode
 *     If value of buttons item is array, it will be added to the button form element.
 *   - excluded: list of buttons which should not be handled.
 *   Inclided section have prioriry over excluded section.
 * @param $options
 *   (optional) An associative array with asaf options. Can have the folowing keys:
 *   - needed_files: Array of files which should be loaded for the correct form handling. File item
 *     can be module name instead of correct filename. In this case all *.inc files from this module
 *     folder will be loaded automatically.
 *
 *   @code
 *     $options = array(
 *       'needed_files' => array(
 *         'modules/user/user.pages.inc', // this file will be loaded
 *         'webform'                      // all inc files from webform module folder will be loaded
 *       );
 *     );
 *   @endcode
 *
 */
function asaf_prepare_form(&$form, &$form_state, array $buttons = array(), array $options = array()) {
  if (!isset($form_state['asaf']['processed']) || !$form_state['asaf']['processed']) {
    $form_id = asaf_get_form_id($form, $form_state);
    asaf_process_form_buttons($form, '', $buttons, $form_id, $options);

    $form_state['asaf'] = array(
      'processed' => TRUE,
      'form_path' => request_path(),
    ) + $options;

    $form['#prefix'] = '<div id="' . asaf_get_form_wrapper_id($form_id) . '">';
    $form['#suffix'] = '</div>';

    // Need for fast way decoding asaf forms instead of a slow call _asaf_get_form_details_from_stacktrace()
    $form['asaf_form'] = array(
      '#type' => 'hidden',
    );

    if (isset($options['needed_files']) && !empty($options['needed_files'])) {
      asaf_register_needed_files($form_state, $options['needed_files']);
    }
  }
}

function asaf_register_needed_files(&$form_state, array $files) {
  if (!isset($form_state['build_info']['files'])) {
    $form_state['build_info']['files'] = array();
  }

  foreach ($files as $file) {
    if ((is_array($file) && isset($file['module']) || (is_string($file) && file_exists($file)))) {
      $form_state['build_info']['files'][] = $file;
    }
    elseif (is_string($file) && module_exists($file)) {
      // Loading all includes of the module
      $path = drupal_get_path('module', $file);
      $destination = DRUPAL_ROOT . '/' . $path;

      $pattern ='/.inc$/';
      $matches = array_keys(file_scan_directory($destination, $pattern));
      if (is_array($matches)) {
        foreach ($matches as $inc) {
          $parts = explode(DRUPAL_ROOT . '/', $inc);
          if (isset($parts[1]) && $parts[1]) {
            $form_state['build_info']['files'][] = $parts[1];
          }
        }
      }
    }
  }
}

function asaf_is_handled_form($form_id) {
  $forms = &drupal_static(__FUNCTION__, NULL);

  if (!isset($forms)) {
    $forms = asaf_get_handled_forms_list();
  }

  return isset($form_id) && isset($forms[$form_id]) ? $forms[$form_id] : FALSE;
}

function asaf_is_handled_button($key, $buttons) {
  $handled = TRUE;

  if (isset($buttons['included'])) {
    $handled = isset($buttons['included'][$key]);
  }
  elseif (isset($buttons['excluded'])) {
    $handled = !isset($buttons['excluded'][$key]);
  }

  return $handled;
}

function asaf_get_handled_button_options($key, $buttons) {
  return isset($buttons['included'][$key]) && is_array($buttons['included'][$key]) ? $buttons['included'][$key] : array();
}

function asaf_get_handled_forms_list() {
  $forms = array();

  $text = variable_get('asaf_forms', 'asaf_admin_settings_form');
  $lines = explode("\n", $text);
  foreach ($lines as $line) {
    $parts = explode('@', trim($line));
    $form_id = isset($parts[0]) ? $parts[0] : '';
    $buttons = isset($parts[1]) ? $parts[1] : '';

    $form_id = trim($form_id);
    $buttons = trim($buttons);
    if ($form_id) {
      $forms[$form_id] = array();

      if ($buttons) {
        $forms[$form_id] = array('included' => array(),
                                 'excluded' => array());

        if ($buttons[0] != '+' && $buttons[0] != '-') {
          $buttons = '+' . $buttons;
        }

        preg_match_all('/([\+\-][^\+\-]+)/', $buttons, $matches);

        if (isset($matches[0]) && is_array($matches[0])) {
          foreach ($matches[0] as $button) {
            $op = $button[0];
            $button = substr($button, 1);

            $forms[$form_id][$op == '+' ? 'included' : 'excluded'][$button] = $button;
          }
        }

        if (!empty($forms[$form_id]['included'])) {
          unset($forms[$form_id]['excluded']);
        }
        else {
          unset($forms[$form_id]['included']);
        }
      }
    }
  }

  drupal_alter('asaf_forms_list', $forms);
  return $forms;
}

function asaf_process_form_buttons(&$elements, $key, $buttons, $form_id, array $options = array()) {
  if (isset($elements['#type']) && $elements['#type'] == 'submit' && asaf_is_handled_button($key, $buttons)) {
    if (!isset($elements['#ajax'])) {
      $elements += array(
        '#ajax' => array(
          'wrapper' => asaf_get_form_wrapper_id($form_id),
          'callback' => 'asaf_form_ajax_callback',
          'progress' => array(
            'type' => 'throbber',
            'message' => ''
          ),
        ),
        '#attached' => array(
          'js' => array(
            drupal_get_path('module', 'asaf') . '/js/asaf.js',
          ),
        ),
      );

      $elements += asaf_get_handled_button_options($key, $buttons);
    }
  }

  foreach (element_children($elements) as $child_key) {
    asaf_process_form_buttons($elements[$child_key], ($key ? $key . '][' . $child_key : $child_key), $buttons, $form_id, $options);
  }
}

function asaf_get_form_wrapper_id($form_id) {
  return str_replace('_', '-', $form_id) . '-wrapper';
}

function asaf_get_form_id(&$form, &$form_state) {
  $form_id = FALSE;

  if (isset($form_state['asaf']['form_id'])) {
    $form_id = $form_state['asaf']['form_id'];
  }
  elseif (isset($form['#id'])) {
    $form_id = $form['#id'];
  }
  elseif (isset($form['#form_id'])) {
    $form_id = asaf_generate_form_id($form['#form_id']);
  }
  else {
    $form_id = asaf_generate_form_id();
  }

  $form_state['asaf']['form_id'] = $form_id;
  return $form_id;
}

function asaf_generate_form_id($prefix = 'asaf-form') {
  $list = &drupal_static(__FUNCTION__, array());

  do {
    $form_id = $prefix . '-' . rand();
  } while (isset($list[$form_id]));

  $list[$form_id] = $form_id;
  return $form_id;
}

function asaf_form_ajax_callback($form, &$form_state) {
  $commands = array();
  $form_id = asaf_get_form_id($form, $form_state);

  if (isset($form_state['redirect'])) {
    if (!is_array($form_state['redirect'])) {
      $form_state['redirect'] = array(
        $form_state['redirect'],
        array('query' => array()),
      );
    }

    $commands[] = asaf_ajax_command_redirect($form_state['redirect']);
  }
  else {
    $form_render_command_callback = isset($form_state['asaf']['form_render_command_callback']) && $form_state['asaf']['form_render_command_callback'] && function_exists($form_state['asaf']['form_render_command_callback']) ? $form_state['asaf']['form_render_command_callback'] : 'asaf_default_form_render_command';

    $command = $form_render_command_callback($form, $form_state);
    if (!empty($command)) {
      $commands[] = $command;
    }
  }

  if (isset($form_state['asaf_ajax_commands']) && is_array($form_state['asaf_ajax_commands'])) {
    $commands = array_merge($commands, $form_state['asaf_ajax_commands']);
  }

  // Flag allow some command alter hooks returns different list of command for validation errors case.
  $form_state['asaf_form_status'] = form_get_errors() ? 'errors' : '';

  drupal_alter('asaf_form_ajax_commands', $commands, $form, $form_state);
  drupal_alter('asaf_form_' . $form['#form_id'] . '_ajax_commands', $commands, $form, $form_state); // We don't use $form_id because we need real form id, not $form['#id'] or autogenerated value

  $form['commands'] = array('#type' => 'ajax', '#commands' => $commands);
  return $form['commands'];
}

function asaf_default_form_render_command($form, $form_state) {
  $form_id = asaf_get_form_id($form, $form_state);

  $messages = theme('status_messages');
  if ($messages) {
    $form = array('asaf_messages' => array(
      '#markup' => $messages,
      '#weight' => -99999999
    )) + $form;
  }

  return ajax_command_replace('#' . asaf_get_form_wrapper_id($form_id), drupal_render($form));
}

function _asaf_is_asaf() {
  $is_asaf = FALSE;

  if (isset($_POST['form_build_id']) && isset($_POST['asaf_form'])) {
      $is_asaf = TRUE;
  }

  return $is_asaf;
}

/*
 * Getting $form and $form_state from stacktrace
 *
 * @return
 *   An array containing the $form and $form_state.
 */
function _asaf_get_form_details_from_stacktrace() {
  static $form;
  static $form_state;

  if (!$form || !$form_state) {
    $stacktrace = debug_backtrace();
    foreach ($stacktrace as $step) {
      $args = isset($step['args']) ? $step['args'] : FALSE;

      if (is_array($args)) {
        foreach ($args as $arg) {
          if (!$form && isset($arg['#type']) && $arg['#type'] == 'form') {
            $form = $arg;
          }
          if (!$form_state && isset($arg['build_info']) && is_array($arg['build_info'])) {
            $form_state = $arg;
          }
        }

        if ($form && $form_state) {
          break;
        }
      }
    }
  }

  return array($form, $form_state);
}

function asaf_ajax_command_redirect($href, $window = 'current') {
  if (is_array($href)) {
    $href = call_user_func_array('url', $href);
  }
  elseif (strpos($href, '://') === FALSE) {
    $href = url($href, array('absolute' => TRUE));
  }

  return array(
    'command' => 'asafRedirect',
    'href' => $href,
    'window' => $window,
  );
}

function asaf_ajax_command_reload($window = 'current') {
  return array(
    'command' => 'asafReload',
    'window' => $window,
  );
}